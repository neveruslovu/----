# game/platform.py
import pygame
from .asset_loader import asset_loader

class Platform(pygame.sprite.Sprite):
    def __init__(self, x, y, width, height, platform_type="grass", is_trap=False, is_door=False):
        super().__init__()
        
        self.platform_type = platform_type
        self.is_trap = is_trap
        self.is_door = is_door
        
        # üî• –ò–°–ü–û–õ–¨–ó–£–ï–ú TILESET –î–õ–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø
        self.image = self.get_tile_image(platform_type)
        if self.image:
            self.image = pygame.transform.scale(self.image, (width, height))
        else:
            # –ó–∞–≥–ª—É—à–∫–∞ –µ—Å–ª–∏ —Ç–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω
            self.image = pygame.Surface((width, height))
            self.image.fill((100, 200, 100))  # –ó–µ–ª–µ–Ω—ã–π –¥–ª—è –ø–ª–∞—Ç—Ñ–æ—Ä–º
        
        self.rect = self.image.get_rect(topleft=(x, y))
        self.has_collision = True
        
        # üî• –°–û–ó–î–ê–ï–ú –°–ü–ï–¶–ò–ê–õ–¨–ù–´–ï COLLISION_RECT –î–õ–Ø –†–ê–ó–ù–´–• –¢–ò–ü–û–í
        self.collision_rect = self.create_collision_rect()
        
        # üî• –î–õ–Ø TRIANGLE –°–û–ó–î–ê–ï–ú –ú–ê–°–ö–£ –î–õ–Ø –¢–û–ß–ù–û–ô –ö–û–õ–õ–ò–ó–ò–ò
        if platform_type == "triangle":
            self.collision_mask = self.create_triangle_mask()
    
    def create_collision_rect(self):
        """–°–æ–∑–¥–∞–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ collision rect –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø–ª–∞—Ç—Ñ–æ—Ä–º"""
        if self.platform_type.startswith("semitype"):
            # üî• –î–õ–Ø SEMITYPE: —É—Ä–µ–∑–∞–µ–º –≤ 2 —Ä–∞–∑–∞ —Å–Ω–∏–∑—É (–≤–µ—Ä—Ö–Ω—è—è –ø–æ–ª–æ–≤–∏–Ω–∞)
            return pygame.Rect(
                self.rect.x,
                self.rect.y, 
                self.rect.width,
                self.rect.height // 2  # –¢–æ–ª—å–∫–æ –≤–µ—Ä—Ö–Ω—è—è –ø–æ–ª–æ–≤–∏–Ω–∞
            )
        else:
            # üî• –î–õ–Ø –û–°–¢–ê–õ–¨–ù–´–•: –æ–±—ã—á–Ω—ã–π rect
            return self.rect.copy()
    
    def create_triangle_mask(self):
        """–°–æ–∑–¥–∞–µ—Ç –º–∞—Å–∫—É –¥–ª—è —Ç—Ä–µ—É–≥–æ–ª—å–Ω–æ–π –∫–æ–ª–ª–∏–∑–∏–∏ (–ø—Ä–∞–≤—ã–π –≤–µ—Ä—Ö–Ω–∏–π ‚Üí –ø—Ä–∞–≤—ã–π –Ω–∏–∂–Ω–∏–π ‚Üí –ª–µ–≤—ã–π –Ω–∏–∂–Ω–∏–π)"""
        mask_surface = pygame.Surface((self.rect.width, self.rect.height), pygame.SRCALPHA)
        
        # üî• –¢–†–ï–£–ì–û–õ–¨–ù–ò–ö: –ø—Ä–∞–≤—ã–π –≤–µ—Ä—Ö–Ω–∏–π ‚Üí –ø—Ä–∞–≤—ã–π –Ω–∏–∂–Ω–∏–π ‚Üí –ª–µ–≤—ã–π –Ω–∏–∂–Ω–∏–π
        points = [
            (self.rect.width, 0),           # –ü—Ä–∞–≤—ã–π –≤–µ—Ä—Ö–Ω–∏–π —É–≥–æ–ª
            (self.rect.width, self.rect.height),  # –ü—Ä–∞–≤—ã–π –Ω–∏–∂–Ω–∏–π —É–≥–æ–ª  
            (0, self.rect.height)           # –õ–µ–≤—ã–π –Ω–∏–∂–Ω–∏–π —É–≥–æ–ª
        ]
        pygame.draw.polygon(mask_surface, (255, 255, 255), points)
        
        return pygame.mask.from_surface(mask_surface)
    
    def check_collision(self, other_rect):
        """üî• –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –ö–û–õ–õ–ò–ó–ò–ô"""
        if not self.has_collision:
            return False
            
        if self.platform_type == "triangle" and hasattr(self, 'collision_mask'):
            # üî• –î–õ–Ø TRIANGLE: –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–∞—Å–∫—É –¥–ª—è —Ç–æ—á–Ω–æ–π –∫–æ–ª–ª–∏–∑–∏–∏
            return self.check_triangle_collision(other_rect)
        else:
            # üî• –î–õ–Ø –û–°–¢–ê–õ–¨–ù–´–•: –∏—Å–ø–æ–ª—å–∑—É–µ–º collision_rect
            return self.collision_rect.colliderect(other_rect)
    
    def check_triangle_collision(self, other_rect):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–ª–∏–∑–∏–∏ —Å —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–æ–º —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –º–∞—Å–∫–∏"""
        if not hasattr(self, 'collision_mask'):
            return False
            
        # –°–æ–∑–¥–∞–µ–º –º–∞—Å–∫—É –¥–ª—è –æ–±—ä–µ–∫—Ç–∞
        other_surface = pygame.Surface((other_rect.width, other_rect.height), pygame.SRCALPHA)
        other_surface.fill((255, 255, 255))
        other_mask = pygame.mask.from_surface(other_surface)
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Å–º–µ—â–µ–Ω–∏–µ
        offset_x = other_rect.x - self.rect.x
        offset_y = other_rect.y - self.rect.y
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ –º–∞—Å–æ–∫
        return self.collision_mask.overlap(other_mask, (offset_x, offset_y))
    
    def get_tile_image(self, platform_type):
        """üî• –ü–û–õ–£–ß–ê–ï–ú –¢–ê–ô–õ –ò–ó TILESET –ü–û –¢–ò–ü–£"""
        type_to_gid = {
            "grass1": 1,  
            "grass_half": 2,            
            "triangle": 25,
            "semitype1": 57,
            "semitype2": 49, 
            "semitype3": 41,
            "grass2": 9,
            "grass3": 89, 
            "grass4": 97,
            "grass5": 73,
            "grass6": 17,
            "box": 341
        }
        
        gid = type_to_gid.get(platform_type, 1)
        return asset_loader.get_tile_image(gid)
    
    def draw(self, screen, camera):
        screen.blit(self.image, camera.apply(self.rect))
        
        # üî• –û–¢–õ–ê–î–ö–ê: –ø–æ–∫–∞–∑–∞—Ç—å collision_rect (—Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
        # if hasattr(self, 'collision_rect') and self.collision_rect != self.rect:
        #     pygame.draw.rect(screen, (255, 0, 0), camera.apply(self.collision_rect), 2)