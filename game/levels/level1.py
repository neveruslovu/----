# game/levels/level1.py
import pygame
import base64
import zlib
import os
from ..platform import Platform
from ..enemies.slime import Slime
from ..enemies.snail import Snail
from ..enemies.fly import Fly
from ..items.items import Item
from ..decorations import Decoration
from ..asset_loader import asset_loader
from ..enemies.saw import Saw
from ..traps.spikes import Spikes
class Level:
    def __init__(self, name):
        print(f"üó∫Ô∏è Creating level: {name}")
        self.name = name
        self.platforms = pygame.sprite.Group()
        self.enemies = pygame.sprite.Group()
        self.items = pygame.sprite.Group()
        self.doors = pygame.sprite.Group()
        self.traps = pygame.sprite.Group()
        self.decorations = pygame.sprite.Group()
        self.background = asset_loader.load_image("backgrounds/colored_grass.png", 1)
        
        self.player = None
        self.player_spawn_point = (256, 700)
        self.width = 30 * 128
        self.height = 20 * 128
        
        self.load_from_xml()
        print(f"üó∫Ô∏è –£—Ä–æ–≤–µ–Ω—å '{name}' —Å–æ–∑–¥–∞–Ω! –°–ø–∞–≤–Ω –∏–≥—Ä–æ–∫–∞: {self.player_spawn_point}")
    
    def set_player(self, player):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –∏–≥—Ä–æ–∫–∞"""
        self.player = player
        if self.player:
            self.player.rect.x = self.player_spawn_point[0]
            self.player.rect.y = self.player_spawn_point[1]
            self.player.respawn_position = self.player_spawn_point
    
    def decode_layer_data(self, encoded_data):
        """–î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å–ª–æ—è —Ç–∞–π–ª–æ–≤ –∏–∑ base64+zlib"""
        try:
            # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
            encoded_data = encoded_data.strip().replace('\n', '').replace('\r', '')
            
            decoded = base64.b64decode(encoded_data)
            decompressed = zlib.decompress(decoded)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å–ø–∏—Å–æ–∫ —Ç–∞–π–ª–æ–≤
            tile_data = []
            for i in range(0, len(decompressed), 4):
                tile_gid = int.from_bytes(decompressed[i:i+4], byteorder='little')
                tile_data.append(tile_gid)
            
            return tile_data
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ª–æ—è: {e}")
            return []
    
    def load_from_xml(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —É—Ä–æ–≤–Ω—è –∏–∑ XML –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # üî• –û–°–ù–û–í–ù–û–ô –°–õ–û–ô –¢–ê–ô–õ–û–í (layer id="4")
            main_layer_data = "eJxjYBi5gAWKqQlY0fBwBKT6jYWBNmFNCRAmUx85ccvCMDjDABug1H+0BlJ0sAOb3yWhtDgUg4AYkjyMLYxDPzH2ceGQoycejIB9gOxlA2IJGpqPLbyxxQWITW55hQ1wMdA3TQ329EVLAACnnwK2"
            tile_data = self.decode_layer_data(main_layer_data)
            
            # üî• –†–ê–°–®–ò–†–ï–ù–ù–û–ï –°–û–û–¢–í–ï–¢–°–¢–í–ò–ï GID –¢–ò–ü–ê–ú –ü–õ–ê–¢–§–û–†–ú
            gid_to_type = {
                1: "grass_half_left", 2: "grass_half_mid", 3: "grass_half_right",
                4: "grass_half", 5: "grass", 6: "door_mid", 7: "door_top",
                8: "grass_hill_right", 9: "spikes", 10: "grass_round",
                11: "box", 12: "lock_yellow", 13: "coin", 14: "key_yellow", 
                15: "jewel_blue", 16: "fly", 17: "saw", 18: "slime",
                19: "mushroom", 20: "snail", 21: "player_spawn",
                22: "cactus", 23: "bush", 24: "signExit",
                25: "doorOpen_mid", 26: "doorOpen_top"
            }
            
            # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –∏–∑ —Ç–∞–π–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã
            for y in range(20):
                for x in range(30):
                    tile_index = y * 30 + x
                    if tile_index < len(tile_data):
                        tile_gid = tile_data[tile_index]
                        
                        if tile_gid in gid_to_type:
                            platform_type = gid_to_type[tile_gid]
                            
                            if tile_gid == 21:  # –¢–æ—á–∫–∞ —Å–ø–∞–≤–Ω–∞
                                self.player_spawn_point = (x * 128, y * 128)
                                continue
                            
                            # üî• –†–ê–ó–î–ï–õ–ï–ù–ò–ï –û–ë–™–ï–ö–¢–û–í –ü–û –¢–ò–ü–ê–ú
                            if tile_gid in [19, 22, 23, 24]:  # –§–æ–Ω–æ–≤—ã–µ –æ–±—ä–µ–∫—Ç—ã
                                decoration = Decoration(x * 128, y * 128, 128, 128, platform_type)
                                self.decorations.add(decoration)
                                
                            elif tile_gid == 9:  # –®–∏–ø—ã
                                # üî• –ü–û–î–ù–ò–ú–ê–ï–ú –®–ò–ü–´ –ù–ê –†–ê–ó–ú–ï–† –¢–ê–ô–õ–ê –í–í–ï–†–•
                                platform = Platform(x * 128, y * 128 - 128, 128, 128, platform_type, is_trap=True)
                                self.traps.add(platform)
                                
                            elif tile_gid in [6, 7, 25, 26]:  # –î–≤–µ—Ä–∏
                                platform = Platform(x * 128, y * 128, 128, 128, platform_type, is_door=True)
                                self.doors.add(platform)
                                
                            else:  # –û–±—ã—á–Ω—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
                                platform = Platform(x * 128, y * 128, 128, 128, platform_type)
                                self.platforms.add(platform)
            
            # üî• –û–ë–ù–û–í–õ–ï–ù–ù–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –û–ë–™–ï–ö–¢–û–í
            self.add_items_from_xml()
            self.add_enemies_from_objects()
            self.add_decorations_from_xml()
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—Ä–æ–≤–Ω—è: {e}")
            self.create_fallback_level()
    
    def add_items_from_xml(self):
        """–î–æ–±–∞–≤–ª—è–µ–º —Å–æ–±–∏—Ä–∞–µ–º—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã"""
        items_data = [
            (442, 256, 128, 128, "key_yellow"),
            (3200, 256, 128, 128, "jewel_blue"),
            
            # –ú–æ–Ω–µ—Ç—ã
            (384, 1152, 128, 128, "coin"),
            (640, 1152, 128, 128, "coin"),
            (896, 896, 128, 128, "coin"),
            (1024, 896, 128, 128, "coin"),
            (1152, 896, 128, 128, "coin"),
            (640, 640, 128, 128, "coin"),
            (2688, 1024, 128, 128, "coin"),
            (2688, 512, 128, 128, "coin"),
            (2816, 512, 128, 128, "coin"),
            (3072, 768, 128, 128, "coin"),
        ]
        
        for x, y, w, h, item_type in items_data:
            item = Item(x, y, w, h, item_type)
            self.items.add(item)
    
    def add_decorations_from_xml(self):
        """–î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –æ–±—ä–µ–∫—Ç—ã (–Ω–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É—é—Ç —Å –∏–≥—Ä–æ–∫–æ–º)"""
        decorations_data = [
            # –Ø—â–∏–∫–∏ (–Ω–µ —Å–æ–±–∏—Ä–∞–µ–º—ã–µ)
            (2048, 1920, 128, 128, "box"),
            (2176, 1920, 128, 128, "box"),
            # –ó–∞–º–æ–∫ (–Ω–µ —Å–æ–±–∏—Ä–∞–µ–º—ã–π)
            (710.667, 1977.33, 32, 32, "lock_yellow"),
        ]
        
        for x, y, w, h, deco_type in decorations_data:
            decoration = Decoration(x, y, w, h, deco_type)
            self.decorations.add(decoration)
    
    def add_enemies_from_objects(self):
        """–î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–∞–≥–æ–≤ –∏–∑ –æ–±—ä–µ–∫—Ç–æ–≤ XML"""
        enemies_data = [
            # –ú—É—Ö–∏
            (2688, 1920, 128, 128, "fly"),
            (2688, 2048, 128, 128, "fly"),
            
            # –ü–∏–ª–∞
            (3584, 2176, 128, 128, "saw"),
            
            # –°–ª–∞–π–º—ã
            (896, 1536, 128, 128, "slime"),
            (512, 1536, 128, 128, "slime"),
            (1152, 1536, 128, 128, "slime"),
            
            # –£–ª–∏—Ç–∫–∏
            (2176, 1536, 128, 128, "snail"),
            (2560, 1536, 128, 128, "snail"),
            
        ]
        
        for x, y, w, h, enemy_type in enemies_data:
            try:
                if enemy_type == "slime":
                    enemy = Slime(x, y)
                elif enemy_type == "snail":
                    enemy = Snail(x, y)
                elif enemy_type == "fly":
                    enemy = Fly(x, y)
                elif enemy_type == "saw":
                    enemy = Saw(x, y)
            
                self.enemies.add(enemy)
                print(f"‚úÖ –í—Ä–∞–≥ {enemy_type} —Å–æ–∑–¥–∞–Ω –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ ({x}, {y})")
            
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤—Ä–∞–≥–∞ {enemy_type}: {e}")
                # –°–æ–∑–¥–∞–µ–º —Å–ª–∞–π–º–∞ –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
                fallback_enemy = Slime(x, y)
                self.enemies.add(fallback_enemy)
                print(f"üîÑ –°–æ–∑–¥–∞–Ω —Å–ª–∞–π–º –≤–º–µ—Å—Ç–æ {enemy_type}")
        
        # üî• –®–ò–ü–´ –ö–ê–ö –õ–û–í–£–®–ö–ò - –ü–û–î–ù–ò–ú–ê–ï–ú –ù–ê –†–ê–ó–ú–ï–† –¢–ê–ô–õ–ê
        spikes_data = [
            (896, 2176 - 128, 128, 128), (1024, 2176 - 128, 128, 128),
            (0, 2176 - 128, 128, 128), (128, 2176 - 128, 128, 128),
            (256, 2176 - 128, 128, 128), (384, 2176 - 128, 128, 128),
            (1536, 1536 - 128, 128, 128), (1664, 1536 - 128, 128, 128),
            (1792, 1536 - 128, 128, 128), (3072, 1536 - 128, 128, 128),
            (3328, 768 - 128, 128, 128), (384, 640 - 128, 128, 128),
            (512, 640 - 128, 128, 128), (512, 1152 - 128, 128, 128),
            (2944, 2176 - 128, 128, 128), (3072, 2176 - 128, 128, 128),
            (3200, 2176 - 128, 128, 128)
        ]
        
        for x, y, w, h in spikes_data:
            spike = Spikes(x, y, w, h)  # ‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª–∞—Å—Å Spikes
            self.traps.add(spike)
    
    def create_fallback_level(self):
        """–†–µ–∑–µ—Ä–≤–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –µ—Å–ª–∏ XML –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è"""
        print("üîÑ –°–æ–∑–¥–∞—é —Ä–µ–∑–µ—Ä–≤–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å...")
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –∑–µ–º–ª—è
        for x in range(0, 3840, 128):
            self.platforms.add(Platform(x, 2400, 128, 128, "grass"))
        
        # –ù–µ—Å–∫–æ–ª—å–∫–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º
        platforms_data = [
            (100, 300, 100, 20),
            (300, 500, 100, 20),
            (500, 600, 100, 20),
        ]
        
        for x, y, w, h in platforms_data:
            self.platforms.add(Platform(x, y, w, h, "grass"))
        
        # –ë–∞–∑–æ–≤—ã–µ –≤—Ä–∞–≥–∏
        self.enemies.add(Slime(500, 2272))
        self.enemies.add(Slime(800, 2272))
        
        print("‚úÖ –†–µ–∑–µ—Ä–≤–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —Å–æ–∑–¥–∞–Ω")
    
    def update(self, dt):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è"""
        for enemy in self.enemies:
            enemy.update(dt, self)
        
        # üî• –ü–†–û–í–ï–†–ö–ê –°–ë–û–†–ê –ü–†–ï–î–ú–ï–¢–û–í
        if self.player:
            self.check_item_collection()
    
    def check_item_collection(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–±–æ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏–≥—Ä–æ–∫–æ–º"""
        for item in self.items.sprites():
            if not item.collected and self.player.rect.colliderect(item.rect):
                item_type = item.collect()
                if item_type:
                    print(f"üéÅ –°–æ–±—Ä–∞–Ω –ø—Ä–µ–¥–º–µ—Ç: {item_type}")
                    # üî• –û–ë–ù–û–í–õ–Ø–ï–ú –°–ß–ï–¢–ß–ò–ö–ò –ò–ì–†–û–ö–ê
                    if item_type == "coin":
                        self.player.coins += 1
                    elif item_type == "key_yellow":
                        self.player.keys += 1
                    elif item_type == "jewel_blue":
                        self.player.jewels += 1
    
    def draw(self, screen, camera):
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ —É—Ä–æ–≤–Ω—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ"""
        screen.blit(self.background, (0, 0))
        
        # üî• –ü–†–ê–í–ò–õ–¨–ù–´–ô –ü–û–†–Ø–î–û–ö –û–¢–†–ò–°–û–í–ö–ò:
        
        # 1. –û—Å–Ω–æ–≤–Ω—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –∏ –∑–µ–º–ª—è
        for platform in self.platforms:
            platform.draw(screen, camera)
        
        # 2. –î–µ–∫–æ—Ä–∞—Ü–∏–∏ (—Ä–∏—Å—É—é—Ç—Å—è –ü–û–î –≤—Ä–∞–≥–∞–º–∏ –∏ –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏)
        for decoration in self.decorations:
            decoration.draw(screen, camera)
        
        # 3. –®–∏–ø—ã (—Ä–∏—Å—É—é—Ç—Å—è –ü–û–í–ï–†–• –ø–ª–∞—Ç—Ñ–æ—Ä–º)
        for trap in self.traps:
            trap.draw(screen, camera)
        
        # 4. –î–≤–µ—Ä–∏
        for door in self.doors:
            door.draw(screen, camera)
        
        # 5. –í—Ä–∞–≥–∏
        for enemy in self.enemies:
            enemy.draw(screen, camera)
        
        # 6. –ü—Ä–µ–¥–º–µ—Ç—ã (—Ä–∏—Å—É—é—Ç—Å—è –ü–û–í–ï–†–• –≤—Å–µ–≥–æ)
        for item in self.items:
            item.draw(screen, camera)