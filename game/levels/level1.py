# game/levels/level1.py
import pygame
import base64
import zlib
import os
from ..platform import Platform
from ..enemies.slime import Slime
from ..enemies.snail import Snail
from ..enemies.fly import Fly
from ..asset_loader import asset_loader

class Level:
    def __init__(self, name):
        print(f"üó∫Ô∏è Creating level: {name}")
        self.name = name
        self.platforms = pygame.sprite.Group()
        self.enemies = pygame.sprite.Group()
        self.items = pygame.sprite.Group()
        self.doors = pygame.sprite.Group()
        self.traps = pygame.sprite.Group()
        self.background = asset_loader.load_image("backgrounds/colored_grass.png", 1)
        
        self.player = None
        self.player_spawn_point = (256, 700)  # üî• –ü–û –£–ú–û–õ–ß–ê–ù–ò–Æ
        self.width = 30 * 128
        self.height = 20 * 128
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –∏–∑ XML
        self.load_from_xml()
        print(f"üó∫Ô∏è –£—Ä–æ–≤–µ–Ω—å '{name}' —Å–æ–∑–¥–∞–Ω! –°–ø–∞–≤–Ω –∏–≥—Ä–æ–∫–∞: {self.player_spawn_point}")
    
    def set_player(self, player):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –∏–≥—Ä–æ–∫–∞"""
        self.player = player
        if self.player:
            self.player.rect.x = self.player_spawn_point[0]
            self.player.rect.y = self.player_spawn_point[1]
            self.player.respawn_position = self.player_spawn_point
    
    def decode_layer_data(self, encoded_data):
        """–î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å–ª–æ—è —Ç–∞–π–ª–æ–≤ –∏–∑ base64+zlib"""
        try:
            # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
            encoded_data = encoded_data.strip().replace('\n', '').replace('\r', '')
            
            decoded = base64.b64decode(encoded_data)
            decompressed = zlib.decompress(decoded)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å–ø–∏—Å–æ–∫ —Ç–∞–π–ª–æ–≤
            tile_data = []
            for i in range(0, len(decompressed), 4):
                tile_gid = int.from_bytes(decompressed[i:i+4], byteorder='little')
                tile_data.append(tile_gid)
            
            return tile_data
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ª–æ—è: {e}")
            return []
    
    def load_from_xml(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —É—Ä–æ–≤–Ω—è –∏–∑ XML –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # üî• –û–°–ù–û–í–ù–û–ô –°–õ–û–ô –¢–ê–ô–õ–û–í (layer id="4")
            main_layer_data = "eJxjYBi5gAWKqQlY0fBwBKT6jYWBNmFNCRAmUx85ccvCMDjDABug1H+0BlJ0sAOb3yWhtDgUg4AYkjyMLYxDPzH2ceGQoycejIB9gOxlA2IJGpqPLbyxxQWITW55hQ1wMdA3TQ329EVLAACnnwK2"
            tile_data = self.decode_layer_data(main_layer_data)
            
            # üî• –†–ê–°–®–ò–†–ï–ù–ù–û–ï –°–û–û–¢–í–ï–¢–°–¢–í–ò–ï GID –¢–ò–ü–ê–ú –ü–õ–ê–¢–§–û–†–ú
            gid_to_type = {
                1: "grass_half_left",
                2: "grass_half_mid", 
                3: "grass_half_right",
                4: "grass_half",
                5: "grass",
                6: "door_mid",
                7: "door_top",
                8: "grass_hill_right", 
                9: "spikes",
                10: "grass_round",
                11: "box",
                12: "lock_yellow",
                13: "coin",
                14: "key_yellow", 
                15: "jewel_blue",
                16: "fly",
                17: "saw",
                18: "slime",
                19: "mushroom",
                20: "snail",
                21: "player_spawn",
                22: "cactus",
                23: "bush",
                24: "sign_exit",
                25: "door_open_mid",
                26: "door_open_top"
            }
            
            # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –∏–∑ —Ç–∞–π–ª–æ–≤–æ–π –∫–∞—Ä—Ç—ã
            for y in range(20):
                for x in range(30):
                    tile_index = y * 30 + x
                    if tile_index < len(tile_data):
                        tile_gid = tile_data[tile_index]
                        
                        if tile_gid in gid_to_type:
                            platform_type = gid_to_type[tile_gid]
                            
                            # üî• –û–°–û–ë–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –î–õ–Ø –¢–û–ß–ö–ò –°–ü–ê–í–ù–ê –ò–ì–†–û–ö–ê
                            if tile_gid == 21:
                                self.player_spawn_point = (x * 128, y * 128)
                                continue  # –ù–µ —Å–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –¥–ª—è —Ç–æ—á–∫–∏ —Å–ø–∞–≤–Ω–∞
                            
                            is_trap = (tile_gid == 9)
                            is_door = (tile_gid in [6, 7, 25, 26])
                            
                            platform = Platform(
                                x * 128, y * 128, 128, 128,
                                platform_type=platform_type,
                                is_trap=is_trap,
                                is_door=is_door
                            )
                            
                            if is_trap:
                                self.traps.add(platform)
                            elif is_door:
                                self.doors.add(platform)
                            else:
                                self.platforms.add(platform)
            
            # üî• –û–ë–ù–û–í–õ–ï–ù–ù–´–ï –û–ë–™–ï–ö–¢–´ –ò–ó OBJECTGROUP
            self.add_objects_from_xml()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–∞–≥–æ–≤ –∏–∑ –æ–±—ä–µ–∫—Ç–æ–≤
            self.add_enemies_from_objects()
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —É—Ä–æ–≤–Ω—è: {e}")
            self.create_fallback_level()
    
    def add_objects_from_xml(self):
        """–î–æ–±–∞–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç—ã –∏–∑ objectgroup XML"""
        # üî• –û–ë–ù–û–í–õ–ï–ù–ù–´–ï –û–ë–™–ï–ö–¢–´ –ò–ó –í–ê–®–ï–ì–û –ù–û–í–û–ì–û XML
        objects_data = [
            # –ö–ª—é—á–∏ –∏ –ø—Ä–µ–¥–º–µ—Ç—ã
            (442, 256, 128, 128, "key_yellow", 14),             # –ñ–µ–ª—Ç—ã–π –∫–ª—é—á
            (710.667, 1977.33, 32, 32, "lock_yellow", 12),      # –ñ–µ–ª—Ç—ã–π –∑–∞–º–æ–∫
            (3200, 256, 128, 128, "jewel_blue", 15),            # –°–∏–Ω–∏–π –¥–∂–µ–≤–µ–ª
            
            # –ú–æ–Ω–µ—Ç—ã
            (384, 1152, 128, 128, "coin", 13),
            (640, 1152, 128, 128, "coin", 13),
            (896, 896, 128, 128, "coin", 13),
            (1024, 896, 128, 128, "coin", 13),
            (1152, 896, 128, 128, "coin", 13),
            (640, 640, 128, 128, "coin", 13),
            (2688, 1024, 128, 128, "coin", 13),
            (2688, 512, 128, 128, "coin", 13),
            (2816, 512, 128, 128, "coin", 13),
            (3072, 768, 128, 128, "coin", 13),
            
            # –Ø—â–∏–∫–∏
            (2048, 1920, 128, 128, "box", 11),
            (2176, 1920, 128, 128, "box", 11),
        ]
        
        for x, y, w, h, obj_type, gid in objects_data:
            platform = Platform(x, y, w, h, platform_type=obj_type)
            self.platforms.add(platform)
    
    def add_enemies_from_objects(self):
        """–î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–∞–≥–æ–≤ –∏–∑ –æ–±—ä–µ–∫—Ç–æ–≤ XML"""
        # üî• –í–†–ê–ì–ò –ò–ó OBJECTGROUP
        enemies_data = [
            # –ú—É—Ö–∏ (gid=16)
            (2688, 1920, 128, 128, "fly", 16),
            (2688, 2048, 128, 128, "fly", 16),
            
            # –ü–∏–ª–∞ (gid=17)
            (3584, 2176, 128, 128, "saw", 17),
            
            # –°–ª–∞–π–º—ã (gid=18)
            (896, 1536, 128, 128, "slime", 18),
            (512, 1536, 128, 128, "slime", 18),
            (1152, 1536, 128, 128, "slime", 18),
            
            # –£–ª–∏—Ç–∫–∏ (gid=20)
            (2176, 1536, 128, 128, "snail", 20),
            (2560, 1536, 128, 128, "snail", 20),
        ]
        
        for x, y, w, h, enemy_type, gid in enemies_data:
            if enemy_type == "slime":
                self.enemies.add(Slime(x, y))
            elif enemy_type == "snail":
                # üî• –î–û–ë–ê–í–¨–¢–ï –ö–õ–ê–°–° Snail –ï–°–õ–ò –ï–ì–û –ï–©–ï –ù–ï–¢
                try:
                    self.enemies.add(Snail(x, y))
                except:
                    # –í—Ä–µ–º–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º Slime –≤–º–µ—Å—Ç–æ Snail
                    self.enemies.add(Slime(x, y))
            else:
                # –î–ª—è fly –∏ saw –≤—Ä–µ–º–µ–Ω–Ω–æ —Å–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
                platform = Platform(x, y, w, h, platform_type=enemy_type)
                self.platforms.add(platform)
        
        # üî• –î–û–ë–ê–í–õ–Ø–ï–ú –®–ò–ü–´ –ö–ê–ö –õ–û–í–£–®–ö–ò
        spikes_data = [
            (896, 2176, 128, 128), (1024, 2176, 128, 128),
            (0, 2176, 128, 128), (128, 2176, 128, 128),
            (256, 2176, 128, 128), (384, 2176, 128, 128),
            (1536, 1536, 128, 128), (1664, 1536, 128, 128),
            (1792, 1536, 128, 128), (3072, 1536, 128, 128),
            (3328, 768, 128, 128), (384, 640, 128, 128),
            (512, 640, 128, 128), (512, 1152, 128, 128),
            (2944, 2176, 128, 128), (3072, 2176, 128, 128),
            (3200, 2176, 128, 128)
        ]
        
        for x, y, w, h in spikes_data:
            spike = Platform(x, y, w, h, platform_type="spikes", is_trap=True)
            self.traps.add(spike)
    
    def create_fallback_level(self):
        """–†–µ–∑–µ—Ä–≤–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –µ—Å–ª–∏ XML –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è"""
        print("üîÑ –°–æ–∑–¥–∞—é —Ä–µ–∑–µ—Ä–≤–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å...")
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –∑–µ–º–ª—è
        for x in range(0, 3840, 128):
            self.platforms.add(Platform(x, 2400, 128, 128, "grass"))
        
        # –ù–µ—Å–∫–æ–ª—å–∫–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º
        platforms_data = [
            (100, 300, 100, 20),
            (300, 500, 100, 20),
            (500, 600, 100, 20),
        ]
        
        for x, y, w, h in platforms_data:
            self.platforms.add(Platform(x, y, w, h, "grass"))
        
        # –ë–∞–∑–æ–≤—ã–µ –≤—Ä–∞–≥–∏
        self.enemies.add(Slime(500, 2272))
        self.enemies.add(Slime(800, 2272))
    
    def update(self, dt):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è"""
        for enemy in self.enemies:
            enemy.update(dt, self)
    
    def draw(self, screen, camera):
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ —É—Ä–æ–≤–Ω—è"""
        screen.blit(self.background, (0, 0))
        
        for platform in self.platforms:
            platform.draw(screen, camera)
        
        for door in self.doors:
            door.draw(screen, camera)
        
        for trap in self.traps:
            trap.draw(screen, camera)
        
        for enemy in self.enemies:
            enemy.draw(screen, camera)