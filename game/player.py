"""
–ö–ª–∞—Å—Å –∏–≥—Ä–æ–∫–∞ - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, —Ñ–∏–∑–∏–∫–∞, –∞–Ω–∏–º–∞—Ü–∏–∏
"""

import pygame
from pygame.math import Vector2
from .health import HealthComponent
from .experience import ExperienceSystem
from .items.inventory import Inventory

class Player(pygame.sprite.Sprite):
    def __init__(self, pos=(100, 300)):
        super().__init__()
        
        # –ü–æ–∑–∏—Ü–∏—è –∏ —Ä–∞–∑–º–µ—Ä—ã
        self.image = pygame.Surface((32, 64))
        self.image.fill((255, 0, 0))  # –ö—Ä–∞—Å–Ω—ã–π –∫–≤–∞–¥—Ä–∞—Ç –∫–∞–∫ –∑–∞–≥–ª—É—à–∫–∞
        self.rect = self.image.get_rect(topleft=pos)
        
        # –§–∏–∑–∏–∫–∞
        self.velocity = Vector2(0, 0)
        self.speed = 300
        self.jump_power = -600
        self.gravity = 1500
        self.on_ground = False
        self.facing_right = True
        
        # –ë–æ–µ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞
        self.is_attacking = False
        self.attack_cooldown = 0
        self.attack_damage = 10
        self.attack_rect = pygame.Rect(0, 0, 50, 32)
        
        # RPG —Å–∏—Å—Ç–µ–º—ã
        self.health_component = HealthComponent(100)
        self.experience = ExperienceSystem(self)
        self.inventory = Inventory()
        
        print("üéØ –ò–≥—Ä–æ–∫ —Å–æ–∑–¥–∞–Ω!")
    
    def handle_input(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–≥—Ä–æ–∫–∞"""
        keys = pygame.key.get_pressed()
        
        # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–µ –¥–≤–∏–∂–µ–Ω–∏–µ
        if keys[pygame.K_a] or keys[pygame.K_LEFT]:
            self.velocity.x = -self.speed
            self.facing_right = False
        elif keys[pygame.K_d] or keys[pygame.K_RIGHT]:
            self.velocity.x = self.speed
            self.facing_right = True
        else:
            self.velocity.x = 0
            
        # –ü—Ä—ã–∂–æ–∫
        if (keys[pygame.K_SPACE] or keys[pygame.K_w] or keys[pygame.K_UP]) and self.on_ground:
            self.jump()
            
        # –ê—Ç–∞–∫–∞
        if keys[pygame.K_j] and not self.is_attacking and self.attack_cooldown <= 0:
            self.attack()
    
    def jump(self):
        """–ü—Ä—ã–∂–æ–∫ –∏–≥—Ä–æ–∫–∞"""
        self.velocity.y = self.jump_power
        self.on_ground = False
        print("ü¶ò –ü—Ä—ã–∂–æ–∫!")
    
    def attack(self):
        """–ê—Ç–∞–∫–∞ –∏–≥—Ä–æ–∫–∞"""
        self.is_attacking = True
        self.attack_cooldown = 0.3  # 300ms –∫–¥
        
        # –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ö–∏—Ç–±–æ–∫—Å–∞ –∞—Ç–∞–∫–∏
        if self.facing_right:
            self.attack_rect.midleft = self.rect.midright
        else:
            self.attack_rect.midright = self.rect.midleft
            
        print("‚öîÔ∏è –ê—Ç–∞–∫–∞!")
    
    def apply_physics(self, dt):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–∑–∏–∫–∏"""
        # –ì—Ä–∞–≤–∏—Ç–∞—Ü–∏—è
        self.velocity.y += self.gravity * dt
        
        # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ –ø–∞–¥–µ–Ω–∏—è
        if self.velocity.y > 1000:
            self.velocity.y = 1000
            
        # –ö–¥ –∞—Ç–∞–∫–∏
        if self.attack_cooldown > 0:
            self.attack_cooldown -= dt
            if self.attack_cooldown <= 0:
                self.is_attacking = False
    
    def handle_collisions(self, level):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–π —Å —É—Ä–æ–≤–Ω–µ–º"""
        self.on_ground = False
        
        for platform in level.platforms:
            if self.rect.colliderect(platform.rect):
                self.resolve_collision(platform.rect)
    
    def resolve_collision(self, platform_rect):
        """–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è —Å –ø–ª–∞—Ç—Ñ–æ—Ä–º–æ–π"""
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è
        dx = (self.rect.centerx - platform_rect.centerx) / (platform_rect.width / 2)
        dy = (self.rect.centery - platform_rect.centery) / (platform_rect.height / 2)
        
        # –°—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–µ —Å–≤–µ—Ä—Ö—É
        if abs(dy) > abs(dx) and dy < 0 and self.velocity.y > 0:
            self.rect.bottom = platform_rect.top
            self.velocity.y = 0
            self.on_ground = True
        # –°—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–µ —Å–Ω–∏–∑—É
        elif abs(dy) > abs(dx) and dy > 0 and self.velocity.y < 0:
            self.rect.top = platform_rect.bottom
            self.velocity.y = 0
        # –°—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–µ —Å–±–æ–∫—É
        elif abs(dx) > abs(dy):
            if dx < 0:  # –°–ª–µ–≤–∞
                self.rect.right = platform_rect.left
            else:  # –°–ø—Ä–∞–≤–∞
                self.rect.left = platform_rect.right
    
    def update(self, dt, level):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä–æ–∫–∞"""
        self.handle_input()
        self.apply_physics(dt)
        
        # –î–≤–∏–∂–µ–Ω–∏–µ
        self.rect.x += self.velocity.x * dt
        self.rect.y += self.velocity.y * dt
        
        # –ö–æ–ª–ª–∏–∑–∏–∏
        self.handle_collisions(level)
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è
        self.health_component.update(dt)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–º–µ—Ä—Ç–∏
        if self.health_component.is_dead():
            self.respawn()
    
    def respawn(self):
        """–í–æ–∑—Ä–æ–∂–¥–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ –ø–æ—Å–ª–µ —Å–º–µ—Ä—Ç–∏"""
        print("üíÄ –ò–≥—Ä–æ–∫ —É–º–µ—Ä! –í–æ–∑—Ä–æ–∂–¥–µ–Ω–∏–µ...")
        self.health_component.current_health = self.health_component.max_health
        self.rect.topleft = (100, 300)
        self.velocity = Vector2(0, 0)
    
    def draw(self, screen, camera):
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∏–≥—Ä–æ–∫–∞"""
        screen.blit(self.image, camera.apply(self.rect))
        
        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∞ —Ö–∏—Ç–±–æ–∫—Å–∞ –∞—Ç–∞–∫–∏
        if self.is_attacking:
            attack_pos = camera.apply(self.attack_rect)
            pygame.draw.rect(screen, (255, 255, 0), attack_pos, 2)