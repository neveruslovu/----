import pygame
from .asset_loader import asset_loader

class Player:
    class HealthComponent:
        def __init__(self, max_health):
            self.max_health = max_health
            self.current_health = max_health
    
        def take_damage(self, damage):
            """–ù–∞–Ω–æ—Å–∏—Ç —É—Ä–æ–Ω –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –µ—Å–ª–∏ —É—Ä–æ–Ω –±—ã–ª –ø—Ä–∏–º–µ–Ω–µ–Ω"""
            if self.current_health > 0:
                self.current_health -= damage
                if self.current_health < 0:
                    self.current_health = 0
                return True
            return False
    
        def heal(self, amount):
            """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–¥–æ—Ä–æ–≤—å–µ"""
            self.current_health += amount
            if self.current_health > self.max_health:
                self.current_health = self.max_health
    
        def is_dead(self):
            """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–µ—Ä—Ç–≤ –ª–∏ –∏–≥—Ä–æ–∫"""
            return self.current_health <= 0

    def __init__(self, x, y):
        self.rect = pygame.Rect(x, y, 80, 100)
        self.hitbox = pygame.Rect(10, 10, 60, 90)
        
        self.velocity_y = 0
        self.velocity_x = 0
        self.speed = 5
        self.jump_power = -23
        self.gravity = 0.8
        self.is_jumping = False
        self.on_ground = False
        self.facing_right = True
        self.show_hitbox = True

        self.coins = 0
        self.keys = 0
        self.jewels = 0
        
        # Coyote Time
        self.coyote_time = 0.15
        self.time_since_ground = 0
        self.jump_buffer = 0
        self.jump_buffer_time = 0.1
        
        # –ê–Ω–∏–º–∞—Ü–∏–∏
        self.current_state = "idle"
        self.animation_frame = 0
        self.animation_speed = 0.2
        self.animation_timer = 0
        
        # –°–∏—Å—Ç–µ–º–∞ —É—Ä–æ–Ω–∞
        self.is_invincible = False
        self.invincibility_timer = 0
        self.invincibility_duration = 1.0
        
        # –ê—Ç–∞–∫–∞ –ø—Ä—ã–∂–∫–æ–º
        self.bounce_power = -12
        
        # –û—Ç—Å–∫–æ–∫ –ø—Ä–∏ —É—Ä–æ–Ω–µ
        self.knockback_power = 8
        self.knockback_duration = 0.3
        self.knockback_timer = 0
        self.is_knockback = False
        
        # –°–∏—Å—Ç–µ–º–∞ —Å–º–µ—Ä—Ç–∏
        self.is_alive = True
        self.respawn_timer = 0
        self.respawn_duration = 2.0
        self.respawn_position = (x, y)
        
        # üî• –î–û–ë–ê–í–õ–ï–ù–û: –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—Ä–æ–∂–∞–Ω–∏—è
        self.blocked_left = False
        self.blocked_right = False
        
        self.health_component = self.HealthComponent(60)
        print(f"üéØ Player created at position: ({x}, {y})")
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø—Ä–∞–π—Ç–æ–≤
        self.load_sprites()
        self.current_sprite = self.idle_sprite
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–π
        self.old_x = x
        self.old_y = y
    
    def load_sprites(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ —Å–ø—Ä–∞–π—Ç—ã –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–π"""
        self.idle_sprite = asset_loader.load_image("player/alienPink_front.png", 0.6)
        self.run_sprites = [
            asset_loader.load_image("player/alienPink_stand.png", 0.6),
            asset_loader.load_image("player/alienPink_walk1.png", 0.6),
            asset_loader.load_image("player/alienPink_walk2.png", 0.6)
        ]
        self.jump_sprite = asset_loader.load_image("player/alienPink_jump.png", 0.6)
        self.land_sprite = asset_loader.load_image("player/alienPink_duck.png", 0.6)
    
    def update_animation(self, moved):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∞–Ω–∏–º–∞—Ü–∏—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä–æ–∫–∞"""
        if not self.is_alive:
            return
            
        previous_state = self.current_state
        
        if not self.on_ground:
            self.current_state = "jump"
        elif moved and not self.is_knockback:
            self.current_state = "run"
        else:
            self.current_state = "idle"
        
        if previous_state != self.current_state:
            self.animation_frame = 0
            self.animation_timer = 0
        
        self.animation_timer += self.animation_speed
        
        if self.current_state == "run":
            if self.animation_timer >= 1:
                self.animation_frame = (self.animation_frame + 1) % len(self.run_sprites)
                self.animation_timer = 0
                self.current_sprite = self.run_sprites[self.animation_frame]
        elif self.current_state == "idle":
            self.current_sprite = self.idle_sprite
        elif self.current_state == "jump":
            self.current_sprite = self.jump_sprite
        
        if previous_state == "jump" and self.current_state == "idle":
            self.current_state = "land"
            self.current_sprite = self.land_sprite
            pygame.time.set_timer(pygame.USEREVENT + 1, 300)
    
    def handle_landing_animation(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏ –ø—Ä–∏–∑–µ–º–ª–µ–Ω–∏—è"""
        self.current_state = "idle"
        self.current_sprite = self.idle_sprite

    def update(self, platforms, enemies, current_time, traps=None):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä–æ–∫–∞ —Å —Å–∏—Å—Ç–µ–º–æ–π —É—Ä–æ–Ω–∞"""
        if not self.is_alive:
            self.respawn_timer -= 1/60
            if self.respawn_timer <= 0:
                self.respawn()
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—ã–µ –ø–æ–∑–∏—Ü–∏–∏
        self.old_x = self.rect.x
        self.old_y = self.rect.y

        # –°–º–µ—Ä—Ç—å –ø—Ä–∏ –ø–∞–¥–µ–Ω–∏–∏ –∑–∞ –∫–∞—Ä—Ç—É
        if self.rect.y > 3000:
            self.health_component.current_health = 0
            self.die()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —à–∏–ø–æ–≤
        if traps and not self.is_invincible and self.is_alive:
            self.check_trap_collisions(traps, current_time)
        
        # –¢–∞–π–º–µ—Ä –Ω–µ—É—è–∑–≤–∏–º–æ—Å—Ç–∏
        if self.is_invincible:
            self.invincibility_timer -= 1/60
            if self.invincibility_timer <= 0:
                self.is_invincible = False
        
        # –¢–∞–π–º–µ—Ä –æ—Ç—Å–∫–æ–∫–∞
        if self.is_knockback:
            self.knockback_timer -= 1/60
            if self.knockback_timer <= 0:
                self.is_knockback = False
                self.velocity_x = 0
        
        was_on_ground = self.on_ground
        
        # üî• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è –¥–ª—è –û–ë–´–ß–ù–û–ì–û –¥–≤–∏–∂–µ–Ω–∏—è
        if not self.is_knockback:
            self.handle_horizontal_collisions(platforms)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –≥—Ä–∞–≤–∏—Ç–∞—Ü–∏—é
        self.velocity_y += self.gravity
        self.rect.y += self.velocity_y
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è
        self.handle_vertical_collisions(platforms)
        
        # Coyote Time
        if self.on_ground:
            self.time_since_ground = 0
        elif was_on_ground:
            self.time_since_ground = 0
        else:
            self.time_since_ground += 1/60
        
        # –ê–≤—Ç–æ–ø—Ä—ã–∂–æ–∫ –ø–æ –±—É—Ñ–µ—Ä—É
        if not self.is_knockback and self.jump_buffer > 0 and self.can_jump():
            self.jump()
            self.jump_buffer = 0
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–∞–≥–æ–≤
        self.check_enemy_collisions(enemies, current_time)

    def handle_horizontal_collisions(self, platforms):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è –¥–ª—è –í–°–ï–• —Ç–∏–ø–æ–≤ –¥–≤–∏–∂–µ–Ω–∏—è"""
        # üî• –°–ë–†–ê–°–´–í–ê–ï–ú –§–õ–ê–ì–ò –ë–õ–û–ö–ò–†–û–í–ö–ò –ü–ï–†–ï–î –ü–†–û–í–ï–†–ö–û–ô
        self.blocked_left = False
        self.blocked_right = False

        for platform in platforms:
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –±–µ–∑ –∫–æ–ª–ª–∏–∑–∏–π
            if hasattr(platform, 'has_collision') and not platform.has_collision:
                continue
        
            if self.check_collision(platform):
                # –°–æ–∑–¥–∞–µ–º —Ç–æ—á–Ω—ã–π —Ö–∏—Ç–±–æ–∫—Å –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                player_hitbox = self.get_actual_hitbox()
        
                # üî• –£–õ–£–ß–®–ï–ù–ù–û–ï –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ù–ê–ü–†–ê–í–õ–ï–ù–ò–Ø
                if self.velocity_x > 0 or (self.rect.x > self.old_x):  # –î–≤–∏–∂–µ–Ω–∏–µ –≤–ø—Ä–∞–≤–æ
                    # üî• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π —Ö–∏—Ç–±–æ–∫—Å –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞
                    self.rect.right = platform.rect.left + self.hitbox.x
                    self.velocity_x = 0  # üî• –û–ë–ù–£–õ–Ø–ï–ú –°–ö–û–†–û–°–¢–¨ –í–ú–ï–°–¢–û –û–¢–°–ö–û–ö–ê
                    # üî• –£–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –§–õ–ê–ì –ë–õ–û–ö–ò–†–û–í–ö–ò
                    self.blocked_right = True
                    
                elif self.velocity_x < 0 or (self.rect.x < self.old_x):  # –î–≤–∏–∂–µ–Ω–∏–µ –≤–ª–µ–≤–æ
                    # üî• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π —Ö–∏—Ç–±–æ–∫—Å –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞
                    self.rect.left = platform.rect.right - self.hitbox.x
                    self.velocity_x = 0  # üî• –û–ë–ù–£–õ–Ø–ï–ú –°–ö–û–†–û–°–¢–¨ –í–ú–ï–°–¢–û –û–¢–°–ö–û–ö–ê
                    # üî• –£–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –§–õ–ê–ì –ë–õ–û–ö–ò–†–û–í–ö–ò
                    self.blocked_left = True
                break

    def handle_vertical_collisions(self, platforms):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è"""
        self.on_ground = False
        
        for platform in platforms:
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –±–µ–∑ –∫–æ–ª–ª–∏–∑–∏–π
            if hasattr(platform, 'has_collision') and not platform.has_collision:
                continue
                
            if self.check_collision(platform):
                player_hitbox = self.get_actual_hitbox()
                
                # üî• –£–õ–£–ß–®–ï–ù–ù–û–ï –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –ù–ê–ü–†–ê–í–õ–ï–ù–ò–Ø
                if self.velocity_y > 0:  # –ü–∞–¥–µ–Ω–∏–µ –≤–Ω–∏–∑
                    self.rect.bottom = platform.rect.top
                    self.on_ground = True
                    self.is_jumping = False
                    self.velocity_y = 0
                    self.time_since_ground = 0
           
                elif self.velocity_y < 0:  # –î–≤–∏–∂–µ–Ω–∏–µ –≤–≤–µ—Ä—Ö
                    self.rect.top = platform.rect.bottom
                    self.velocity_y = 0                  
                break

    def get_actual_hitbox(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Ö–∏—Ç–±–æ–∫—Å –≤ –º–∏—Ä–æ–≤—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞—Ö"""
        return pygame.Rect(
            self.rect.x + self.hitbox.x,
            self.rect.y + self.hitbox.y,
            self.hitbox.width,
            self.hitbox.height
        )

    def check_enemy_collisions(self, enemies, current_time):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è —Å –≤—Ä–∞–≥–∞–º–∏"""
        for enemy in enemies.sprites():
            if hasattr(enemy, 'is_dead') and enemy.is_dead:
                continue
            if hasattr(enemy, 'is_hurt') and enemy.is_hurt:
                continue
        
            if self.check_collision_with_enemy(enemy):
                collision_type = self.get_collision_type(enemy)
        
                if collision_type == "top":
                    self.kill_enemy(enemy)
                elif not self.is_invincible and self.is_alive:
                    self.take_damage(10, enemy)

    def get_collision_type(self, enemy):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è —Å –≤—Ä–∞–≥–æ–º"""
        if (self.velocity_y > 0 and 
            self.rect.bottom < enemy.rect.centery and
            self.rect.bottom > enemy.rect.top):
            return "top"
        return "side"

    def kill_enemy(self, enemy):
        """–£–±–∏–≤–∞–µ—Ç –≤—Ä–∞–≥–∞"""
        enemy.take_damage(30)
        self.velocity_y = self.bounce_power

    def take_damage(self, damage, enemy):
        """–ù–∞–Ω–æ—Å–∏—Ç —É—Ä–æ–Ω –∏–≥—Ä–æ–∫—É"""
        if not self.is_invincible and self.is_alive:
            damage_taken = self.health_component.take_damage(damage)
            
            if damage_taken:
                self.is_invincible = True
                self.invincibility_timer = self.invincibility_duration
                self.apply_knockback(enemy)
                
                if self.health_component.current_health <= 0:
                    self.die()

    def apply_knockback(self, enemy):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –æ—Ç—Å–∫–æ–∫ –æ—Ç –≤—Ä–∞–≥–∞"""
        if self.rect.centerx < enemy.rect.centerx:
            self.velocity_x = -self.knockback_power
        else:
            self.velocity_x = self.knockback_power
        
        self.velocity_y = -self.knockback_power * 0.7
        self.is_knockback = True
        self.knockback_timer = self.knockback_duration

    def die(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–º–µ—Ä—Ç—å –∏–≥—Ä–æ–∫–∞"""
        self.is_alive = False
        self.respawn_timer = self.respawn_duration
        self.velocity_y = 0
        self.velocity_x = 0
        self.is_knockback = False
        self.is_invincible = False

    def respawn(self):
        """–í–æ–∑—Ä–æ–∂–¥–∞–µ—Ç –∏–≥—Ä–æ–∫–∞"""
        self.is_alive = True
        self.health_component.current_health = self.health_component.max_health
        self.rect.x = self.respawn_position[0]
        self.rect.y = self.respawn_position[1]
        self.velocity_y = 0
        self.velocity_x = 0
        self.is_invincible = True
        self.invincibility_timer = 3.0
        self.current_state = "idle"
        self.current_sprite = self.idle_sprite

    def check_collision_with_enemy(self, enemy):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–ª–∏–∑–∏–∏ —Å –≤—Ä–∞–≥–æ–º"""
        if hasattr(enemy, 'is_dead') and enemy.is_dead:
            return False
        if hasattr(enemy, 'is_hurt') and enemy.is_hurt:
            return False
    
        return self.get_actual_hitbox().colliderect(enemy.rect)

    def handle_event(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π"""
        if not self.is_alive:
            return
            
        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_SPACE and not self.is_knockback:
                self.jump_buffer = self.jump_buffer_time
        elif event.type == pygame.USEREVENT + 1:
            self.handle_landing_animation()
            pygame.time.set_timer(pygame.USEREVENT + 1, 0)

    def handle_keys(self, keys, platforms):
        """üî• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –¢–µ–ø–µ—Ä—å –ø—Ä–∏–Ω–∏–º–∞–µ—Ç platforms –∫–∞–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä"""
        if not self.is_alive or self.is_knockback:
            return
            
        moved = False
    
        # üî• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–†–û–í–ï–†–Ø–ï–ú –ë–õ–û–ö–ò–†–û–í–ö–£ –ü–ï–†–ï–î –î–í–ò–ñ–ï–ù–ò–ï–ú
        if (keys[pygame.K_LEFT] or keys[pygame.K_a]) and not self.blocked_left:
            self.rect.x -= self.speed
            self.facing_right = False
            moved = True
        if (keys[pygame.K_RIGHT] or keys[pygame.K_d]) and not self.blocked_right:
            self.rect.x += self.speed
            self.facing_right = True
            moved = True
        
        # üî• –í–ê–ñ–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–µ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –¥–≤–∏–∂–µ–Ω–∏—è
        if moved:
            self.handle_horizontal_collisions(platforms)
        
        self.update_animation(moved)

    

    def can_jump(self):
        return (self.on_ground or 
                self.time_since_ground < self.coyote_time) and not self.is_jumping

    def jump(self):
        if self.can_jump():
            self.velocity_y = self.jump_power
            self.is_jumping = True
            self.on_ground = False
            self.time_since_ground = self.coyote_time

    def check_collision(self, platform):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–ª–∏–∑–∏–∏ —Å –ø–ª–∞—Ç—Ñ–æ—Ä–º–æ–π"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–µ–µ—Ç –ª–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –∫–æ–ª–ª–∏–∑–∏–∏
        if hasattr(platform, 'has_collision') and not platform.has_collision:
            return False
        
        # üî• –ò–°–ü–û–õ–¨–ó–£–ï–ú –ù–û–í–£–Æ –°–ò–°–¢–ï–ú–£ –ö–û–õ–õ–ò–ó–ò–ô
        if hasattr(platform, 'check_collision'):
            return platform.check_collision(self.get_actual_hitbox())
        else:
            # –§–æ–ª–±—ç–∫ –Ω–∞ —Å—Ç–∞—Ä—É—é —Å–∏—Å—Ç–µ–º—É
            return self.get_actual_hitbox().colliderect(platform.rect)
    
    def check_trap_collisions(self, traps, current_time):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–π —Å –ª–æ–≤—É—à–∫–∞–º–∏"""
        for trap in traps:
            if hasattr(trap, 'check_collision') and trap.check_collision(self):
                self.take_damage_from_trap(trap.damage)

    def take_damage_from_trap(self, damage):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —É—Ä–æ–Ω–∞ –æ—Ç –ª–æ–≤—É—à–∫–∏"""
        if not self.is_invincible and self.is_alive:
            damage_taken = self.health_component.take_damage(damage)
        
            if damage_taken:
                self.is_invincible = True
                self.invincibility_timer = self.invincibility_duration
                self.velocity_y = -8
            
                if self.health_component.current_health <= 0:
                    self.die()

    def draw(self, screen, camera):
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∏–≥—Ä–æ–∫–∞"""
        if not self.is_alive:
            return
            
        screen_x = self.rect.x - camera.offset.x
        screen_y = self.rect.y - camera.offset.y
        
        if self.is_invincible and int(self.invincibility_timer * 10) % 2 == 0:
            return
        
        if self.current_sprite:
            if not self.facing_right:
                flipped_sprite = pygame.transform.flip(self.current_sprite, True, False)
                screen.blit(flipped_sprite, (screen_x, screen_y))
            else:
                screen.blit(self.current_sprite, (screen_x, screen_y))
        
        if self.show_hitbox:
            hitbox_rect = self.get_actual_hitbox()
            hitbox_rect.x -= camera.offset.x
            hitbox_rect.y -= camera.offset.y
            pygame.draw.rect(screen, (255, 0, 0), hitbox_rect, 2)