import pygame
from .asset_loader import asset_loader

class Player:
    class HealthComponent:
        def __init__(self, max_health):
            self.max_health = max_health
            self.current_health = max_health
    
        def take_damage(self, damage):
            """–ù–∞–Ω–æ—Å–∏—Ç —É—Ä–æ–Ω –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –µ—Å–ª–∏ —É—Ä–æ–Ω –±—ã–ª –ø—Ä–∏–º–µ–Ω–µ–Ω"""
            if self.current_health > 0:
                self.current_health -= damage
                if self.current_health < 0:
                    self.current_health = 0
                return True  # –£—Ä–æ–Ω –±—ã–ª –ø—Ä–∏–º–µ–Ω–µ–Ω
            return False  # –£—Ä–æ–Ω –Ω–µ –±—ã–ª –ø—Ä–∏–º–µ–Ω–µ–Ω (—É–∂–µ –º–µ—Ä—Ç–≤)
    
        def heal(self, amount):
            """–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–¥–æ—Ä–æ–≤—å–µ"""
            self.current_health += amount
            if self.current_health > self.max_health:
                self.current_health = self.max_health
    
        def is_dead(self):
            """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–µ—Ä—Ç–≤ –ª–∏ –∏–≥—Ä–æ–∫"""
            return self.current_health <= 0



    def __init__(self, x, y):
        self.rect = pygame.Rect(x, y, 60, 135)
        self.hitbox = pygame.Rect(10, 10, 60, 135)
        self.velocity_y = 0
        self.velocity_x = 0
        self.speed = 5
        self.jump_power = -15
        self.gravity = 0.8
        self.is_jumping = False
        self.on_ground = False
        self.facing_right = True
        self.show_hitbox = True

        self.coins = 0
        self.keys = 0
        self.jewels = 0
        
        # üîß –£–õ–£–ß–®–ï–ù–ò–ï: Coyote Time –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        self.coyote_time = 0.15
        self.time_since_ground = 0
        self.jump_buffer = 0
        self.jump_buffer_time = 0.1
        
        # üé® –ê–ù–ò–ú–ê–¶–ò–ò
        self.current_state = "idle"
        self.animation_frame = 0
        self.animation_speed = 0.2
        self.animation_timer = 0
        
        # ‚öîÔ∏è –°–ò–°–¢–ï–ú–ê –£–†–û–ù–ê
        self.is_invincible = False
        self.invincibility_timer = 0
        self.invincibility_duration = 1.0
        self.damage_cooldown = 0.5
        self.last_damage_time = 0
        
        # üî® –ê–¢–ê–ö–ê –ü–†–´–ñ–ö–û–ú
        self.bounce_power = -12
        
        # üéØ –û–¢–°–ö–û–ö –ü–†–ò –£–†–û–ù–ï
        self.knockback_power = 8
        self.knockback_duration = 0.3
        self.knockback_timer = 0
        self.is_knockback = False
        
        # üíÄ –°–ò–°–¢–ï–ú–ê –°–ú–ï–†–¢–ò
        self.is_alive = True
        self.respawn_timer = 0
        self.respawn_duration = 2.0
        self.respawn_position = (x, y)  # üî• –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–∑–∏—Ü–∏—é —Ä–µ—Å–ø–∞–≤–Ω–∞
        
        self.health_component = self.HealthComponent(60)
        print(f"üéØ Player created at position: ({x}, {y})")
        
        # üé® –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö —Å–ø—Ä–∞–π—Ç–æ–≤ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–π
        self.load_sprites()
        self.current_sprite = self.idle_sprite
        
    
    def load_sprites(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ —Å–ø—Ä–∞–π—Ç—ã –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–π"""
        self.idle_sprite = asset_loader.load_image("player/alienPink_front.png",0.7)
        self.run_sprites = [
            asset_loader.load_image("player/alienPink_stand.png", 0.7),
            asset_loader.load_image("player/alienPink_walk1.png", 0.7),
            asset_loader.load_image("player/alienPink_walk2.png", 0.7)
        ]
        self.jump_sprite = asset_loader.load_image("player/alienPink_jump.png",  0.7)
        self.land_sprite = asset_loader.load_image("player/alienPink_duck.png",  0.7)
        
        print("üé® All player sprites loaded successfully!")
    
    def update_animation(self, moved):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∞–Ω–∏–º–∞—Ü–∏—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä–æ–∫–∞"""
        if not self.is_alive:  # üî• –ù–µ –æ–±–Ω–æ–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ –º–µ—Ä—Ç–≤
            return
            
        previous_state = self.current_state
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if not self.on_ground:
            if self.velocity_y < 0:
                self.current_state = "jump"
            else:
                self.current_state = "jump"
        elif moved and not self.is_knockback:
            self.current_state = "run"
        else:
            self.current_state = "idle"
        
        # –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
        if previous_state != self.current_state:
            self.animation_frame = 0
            self.animation_timer = 0
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.animation_timer += self.animation_speed
        
        if self.current_state == "run":
            if self.animation_timer >= 1:
                self.animation_frame = (self.animation_frame + 1) % len(self.run_sprites)
                self.animation_timer = 0
                self.current_sprite = self.run_sprites[self.animation_frame]
        elif self.current_state == "idle":
            self.current_sprite = self.idle_sprite
        elif self.current_state == "jump":
            self.current_sprite = self.jump_sprite
        
        # –ê–Ω–∏–º–∞—Ü–∏—è –ø—Ä–∏–∑–µ–º–ª–µ–Ω–∏—è
        if previous_state == "jump" and self.current_state == "idle":
            self.current_state = "land"
            self.current_sprite = self.land_sprite
            pygame.time.set_timer(pygame.USEREVENT + 1, 300)
    
    def handle_landing_animation(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∞–Ω–∏–º–∞—Ü–∏–∏ –ø—Ä–∏–∑–µ–º–ª–µ–Ω–∏—è"""
        self.current_state = "idle"
        self.current_sprite = self.idle_sprite

    def update(self, platforms, enemies, current_time,traps=None):
     
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä–æ–∫–∞ —Å —Å–∏—Å—Ç–µ–º–æ–π —É—Ä–æ–Ω–∞"""
        # üíÄ –û–ë–ù–û–í–õ–ï–ù–ò–ï –†–ï–°–ü–ê–í–ù–ê
        if not self.is_alive:
            self.respawn_timer -= 1/60
            if self.respawn_timer <= 0:
                self.respawn()
            return  # üî• –ü—Ä–µ—Ä—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ –º–µ—Ä—Ç–≤
        if self.rect.y>3000:

            self.health_component.current_health=0
            self.die()
        # üî™ –ü–†–û–í–ï–†–ö–ê –°–¢–û–õ–ö–ù–û–í–ï–ù–ò–ô –° –®–ò–ü–ê–ú–ò
        if traps and not self.is_invincible and self.is_alive:
            self.check_trap_collisions(traps, current_time)
        
        # ‚öîÔ∏è –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–π–º–µ—Ä –Ω–µ—É—è–∑–≤–∏–º–æ—Å—Ç–∏
        if self.is_invincible:
            self.invincibility_timer -= 1/60
            if self.invincibility_timer <= 0:
                self.is_invincible = False
                print("üõ°Ô∏è Invincibility ended")
        
        # üéØ –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–π–º–µ—Ä –æ—Ç—Å–∫–æ–∫–∞
        if self.is_knockback:
            self.knockback_timer -= 1/60
            if self.knockback_timer <= 0:
                self.is_knockback = False
                self.velocity_x = 0
                print("üéØ Knockback ended")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        was_on_ground = self.on_ground
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –≥—Ä–∞–≤–∏—Ç–∞—Ü–∏—é
        self.velocity_y += self.gravity
        self.rect.y += self.velocity_y
        
        # –ü–†–ò–ú–ï–ù–Ø–ï–ú –ì–û–†–ò–ó–û–ù–¢–ê–õ–¨–ù–£–Æ –°–ö–û–†–û–°–¢–¨ (–¥–ª—è –æ—Ç—Å–∫–æ–∫–∞)
        if not self.is_knockback:
            if self.jump_buffer > 0:
                self.jump_buffer -= 1/60
        else:
            self.rect.x += self.velocity_x
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–ª–∏–∑–∏–π —Å –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º–∏
        self.on_ground = False
        for platform in platforms:
            if self.check_collision(platform):
                if self.velocity_y > 0:  # –ü–∞–¥–µ–Ω–∏–µ –≤–Ω–∏–∑
                    self.rect.bottom = platform.rect.top
                    self.on_ground = True
                    self.is_jumping = False
                    self.velocity_y = 0
                    self.time_since_ground = 0
                elif self.velocity_y < 0:  # –î–≤–∏–∂–µ–Ω–∏–µ –≤–≤–µ—Ä—Ö
                    self.rect.top = platform.rect.bottom
                    self.velocity_y = 0
        
        # üîß –û–±–Ω–æ–≤–ª—è–µ–º Coyote Time
        if self.on_ground:
            self.time_since_ground = 0
        elif was_on_ground:
            self.time_since_ground = 0
        else:
            self.time_since_ground += 1/60
        
        # üîß –ê–≤—Ç–æ–ø—Ä—ã–∂–æ–∫ –ø–æ –±—É—Ñ–µ—Ä—É (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –æ—Ç—Å–∫–æ–∫–∞)
        if not self.is_knockback and self.jump_buffer > 0 and self.can_jump():
            self.jump()
            self.jump_buffer = 0
        
        # ‚öîÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–π —Å –≤—Ä–∞–≥–∞–º–∏
        self.check_enemy_collisions(enemies, current_time)

    def check_enemy_collisions(self, enemies, current_time):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è —Å –≤—Ä–∞–≥–∞–º–∏ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É—Ä–æ–Ω"""
        for enemy in enemies.sprites():
            # üî• –ü–†–û–í–ï–†–Ø–ï–ú, –ß–¢–û –í–†–ê–ì –ñ–ò–í –ò –ù–ï –í –†–ï–ñ–ò–ú–ï –ü–û–õ–£–ß–ï–ù–ò–Ø –£–†–û–ù–ê
            if hasattr(enemy, 'is_dead') and enemy.is_dead:
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –º–µ—Ä—Ç–≤—ã—Ö –≤—Ä–∞–≥–æ–≤
        
            if hasattr(enemy, 'is_hurt') and enemy.is_hurt:
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—Ä–∞–≥–æ–≤ –≤ –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω–∏—è —É—Ä–æ–Ω–∞
        
            if self.check_collision_with_enemy(enemy):
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è
                collision_type = self.get_collision_type(enemy)
        
                if collision_type == "top":  # –ò–≥—Ä–æ–∫ –ø—Ä—ã–≥–∞–µ—Ç –Ω–∞ –≤—Ä–∞–≥–∞ —Å–≤–µ—Ä—Ö—É
                    # üî• –ü–†–û–°–¢–û –ù–ê–ù–û–°–ò–ú –£–†–û–ù - —Å–ª–∞–π–º —Å–∞–º —É–º—Ä–µ—Ç —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
                    self.kill_enemy(enemy)
                    print("üî® Enemy killed by jump!")
                elif not self.is_invincible and self.is_alive:
                    # –ò–≥—Ä–æ–∫ –ø–æ–ª—É—á–∞–µ—Ç —É—Ä–æ–Ω —Å–±–æ–∫—É –∏–ª–∏ —Å–Ω–∏–∑—É
                    self.take_damage(10, enemy)
                    print("üí• Player took damage from enemy!")

    def get_collision_type(self, enemy):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏—è —Å –≤—Ä–∞–≥–æ–º"""
        player_bottom = self.rect.bottom
        enemy_top = enemy.rect.top
        player_velocity = self.velocity_y
        
        # –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –¥–≤–∏–∂–µ—Ç—Å—è –≤–Ω–∏–∑ –∏ –µ–≥–æ –Ω–∏–∑ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤—ã—à–µ —Å–µ—Ä–µ–¥–∏–Ω—ã –≤—Ä–∞–≥–∞
        if (player_velocity > 0 and 
            player_bottom < enemy.rect.centery and
            self.rect.bottom > enemy.rect.top):
            return "top"
        return "side"

    def kill_enemy(self, enemy):
        """–£–±–∏–≤–∞–µ—Ç –≤—Ä–∞–≥–∞ –∏ –¥–∞–µ—Ç –æ—Ç—Å–∫–æ–∫ –∏–≥—Ä–æ–∫—É"""
        # üî• –ù–ê–ù–û–°–ò–ú –ù–û–†–ú–ê–õ–¨–ù–´–ô –£–†–û–ù, –∞ –Ω–µ 100
        enemy.take_damage(30)  # –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —á—Ç–æ–±—ã —É–±–∏—Ç—å —Å–ª–∞–π–º–∞ —Å 30 HP
        self.velocity_y = self.bounce_power
        print(f"üéØ Enemy defeated! Bounce: {self.velocity_y}")

    def take_damage(self, damage, enemy):
        """–ù–∞–Ω–æ—Å–∏—Ç —É—Ä–æ–Ω –∏–≥—Ä–æ–∫—É, –≤–∫–ª—é—á–∞–µ—Ç –Ω–µ—É—è–∑–≤–∏–º–æ—Å—Ç—å –∏ –æ—Ç—Å–∫–æ–∫"""
        if not self.is_invincible and self.is_alive:  # üî• –î–û–ë–ê–í–õ–ï–ù–ê –ü–†–û–í–ï–†–ö–ê is_alive
            # üî• –í–ê–ñ–ù–û: –í—ã–∑—ã–≤–∞–µ–º take_damage —É HealthComponent –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            damage_taken = self.health_component.take_damage(damage)
            
            if damage_taken:
                self.is_invincible = True
                self.invincibility_timer = self.invincibility_duration
                self.apply_knockback(enemy)
                
                print(f"‚ù§Ô∏è Player health: {self.health_component.current_health}")
                
                # üíÄ –ü–†–û–í–ï–†–ö–ê –°–ú–ï–†–¢–ò
                if self.health_component.current_health <= 0:
                    self.die()
                    print("üíÄ Player died!")

    def apply_knockback(self, enemy):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –æ—Ç—Å–∫–æ–∫ –æ—Ç –≤—Ä–∞–≥–∞"""
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—Ç—Å–∫–æ–∫–∞
        if self.rect.centerx < enemy.rect.centerx:
            self.velocity_x = -self.knockback_power
        else:
            self.velocity_x = self.knockback_power
        
        # –ù–µ–±–æ–ª—å—à–æ–π –æ—Ç—Å–∫–æ–∫ –≤–≤–µ—Ä—Ö
        self.velocity_y = -self.knockback_power * 0.7
        
        # –í–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º –æ—Ç—Å–∫–æ–∫–∞
        self.is_knockback = True
        self.knockback_timer = self.knockback_duration
        
        print(f"üéØ Knockback applied! Velocity: ({self.velocity_x}, {self.velocity_y})")

    def die(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–º–µ—Ä—Ç—å –∏–≥—Ä–æ–∫–∞"""
        self.is_alive = False
        self.respawn_timer = self.respawn_duration
        self.velocity_y = 0
        self.velocity_x = 0
        self.is_knockback = False
        self.is_invincible = False
        
        print("üíÄ Player died! Respawning in 2 seconds...")

    def respawn(self):
        """–í–æ–∑—Ä–æ–∂–¥–∞–µ—Ç –∏–≥—Ä–æ–∫–∞"""
        self.is_alive = True
        self.health_component.current_health = self.health_component.max_health  # üî• –í–û–°–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú HP
        self.rect.x = self.respawn_position[0]
        self.rect.y = self.respawn_position[1]
        self.velocity_y = 0
        self.velocity_x = 0
        self.is_invincible = True
        self.invincibility_timer = 3.0  # üî• 3 —Å–µ–∫—É–Ω–¥—ã –Ω–µ—É—è–∑–≤–∏–º–æ—Å—Ç–∏ –ø–æ—Å–ª–µ —Ä–µ—Å–ø–∞–≤–Ω–∞
        self.current_state = "idle"
        self.current_sprite = self.idle_sprite
        
        print("üåü Player respawned! 3 seconds of invincibility")

    def check_collision_with_enemy(self, enemy):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–ª–∏–∑–∏–∏ —Å –≤—Ä–∞–≥–æ–º"""
        # üî• –ü–†–û–í–ï–†–Ø–ï–ú, –ß–¢–û –í–†–ê–ì –ñ–ò–í –ò –ù–ï –í –†–ï–ñ–ò–ú–ï –°–ú–ï–†–¢–ò –ò–õ–ò –ü–û–õ–£–ß–ï–ù–ò–Ø –£–†–û–ù–ê
        if hasattr(enemy, 'is_dead') and enemy.is_dead:
            return False  # –ú–µ—Ä—Ç–≤—ã–µ –≤—Ä–∞–≥–∏ –Ω–µ –≤—ã–∑—ã–≤–∞—é—Ç —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–π
    
        # üî• –ü–†–û–í–ï–†–Ø–ï–ú, –ß–¢–û –í–†–ê–ì –ù–ï –í –†–ï–ñ–ò–ú–ï –ü–û–õ–£–ß–ï–ù–ò–Ø –£–†–û–ù–ê
        if hasattr(enemy, 'is_hurt') and enemy.is_hurt:
            return False  # –í—Ä–∞–≥–∏ –≤ –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω–∏—è —É—Ä–æ–Ω–∞ –Ω–µ –≤—ã–∑—ã–≤–∞—é—Ç —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–π
    
        player_hitbox = pygame.Rect(
            self.rect.x + self.hitbox.x,
            self.rect.y + self.hitbox.y,
            self.hitbox.width,
            self.hitbox.height
        )
        return player_hitbox.colliderect(enemy.rect)

    def handle_event(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–∏–Ω–æ—á–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π"""
        if not self.is_alive:  # üî• –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –≤–≤–æ–¥ –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ –º–µ—Ä—Ç–≤
            return
            
        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_SPACE and not self.is_knockback:
                self.jump_buffer = self.jump_buffer_time
                print("üíæ Jump input buffered")
        elif event.type == pygame.USEREVENT + 1:
            self.handle_landing_animation()
            pygame.time.set_timer(pygame.USEREVENT + 1, 0)

    def handle_keys(self, keys):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –∫–ª–∞–≤–∏—à"""
        if not self.is_alive or self.is_knockback:  # üî• –î–û–ë–ê–í–õ–ï–ù–ê –ü–†–û–í–ï–†–ö–ê is_alive
            return
            
        moved = False
    
        arrow_left = keys[pygame.K_LEFT] 
        arrow_right = keys[pygame.K_RIGHT]
        a_key = keys[pygame.K_a]
        d_key = keys[pygame.K_d]
    
        if arrow_left or a_key:
            self.rect.x -= self.speed
            self.facing_right = False
            moved = True
        if arrow_right or d_key:
            self.rect.x += self.speed
            self.facing_right = True
            moved = True
        
        self.update_animation(moved)

    def can_jump(self):
        return (self.on_ground or 
                self.time_since_ground < self.coyote_time) and not self.is_jumping

    def jump(self):
        if self.can_jump():
            self.velocity_y = self.jump_power
            self.is_jumping = True
            self.on_ground = False
            self.time_since_ground = self.coyote_time

    def check_collision(self, platform):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–ª–∏–∑–∏–∏ —Å –ø–ª–∞—Ç—Ñ–æ—Ä–º–æ–π"""
        player_hitbox = pygame.Rect(
            self.rect.x + self.hitbox.x,
            self.rect.y + self.hitbox.y,
            self.hitbox.width,
            self.hitbox.height
        )
        return player_hitbox.colliderect(platform.rect)
    

    def check_trap_collisions(self, traps, current_time):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–π —Å –ª–æ–≤—É—à–∫–∞–º–∏"""
        for trap in traps:
            if hasattr(trap, 'check_collision') and trap.check_collision(self):
                self.take_damage_from_trap(trap.damage)

    def take_damage_from_trap(self, damage):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —É—Ä–æ–Ω–∞ –æ—Ç –ª–æ–≤—É—à–∫–∏"""
        if not self.is_invincible and self.is_alive:
            damage_taken = self.health_component.take_damage(damage)
        
            if damage_taken:
                self.is_invincible = True
                self.invincibility_timer = self.invincibility_duration
            
                # –ù–µ–±–æ–ª—å—à–æ–π –æ—Ç—Å–∫–æ–∫ –æ—Ç —à–∏–ø–æ–≤
                self.velocity_y = -8
            
                print(f"üî™ –ò–≥—Ä–æ–∫ –ø–æ–ª—É—á–∏–ª —É—Ä–æ–Ω –æ—Ç —à–∏–ø–æ–≤! –ó–¥–æ—Ä–æ–≤—å–µ: {self.health_component.current_health}")
            
                if self.health_component.current_health <= 0:
                    self.die()


    def draw(self, screen, camera):
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∏–≥—Ä–æ–∫–∞ —Å —ç—Ñ—Ñ–µ–∫—Ç–æ–º –º–∏–≥–∞–Ω–∏—è –ø—Ä–∏ –Ω–µ—É—è–∑–≤–∏–º–æ—Å—Ç–∏"""
        if not self.is_alive:  # üî• –ù–µ –æ—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –µ—Å–ª–∏ –∏–≥—Ä–æ–∫ –º–µ—Ä—Ç–≤
            return
            
        screen_x = self.rect.x - camera.offset.x
        screen_y = self.rect.y - camera.offset.y
        
        # ‚öîÔ∏è –ú–∏–≥–∞–Ω–∏–µ –ø—Ä–∏ –Ω–µ—É—è–∑–≤–∏–º–æ—Å—Ç–∏
        if self.is_invincible and int(self.invincibility_timer * 10) % 2 == 0:
            return
        
        # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å–ø—Ä–∞–π—Ç–∞
        if self.current_sprite:
            if not self.facing_right:
                flipped_sprite = pygame.transform.flip(self.current_sprite, True, False)
                screen.blit(flipped_sprite, (screen_x, screen_y))
            else:
                screen.blit(self.current_sprite, (screen_x, screen_y))
        else:
            pygame.draw.rect(screen, (255, 0, 0), (screen_x, screen_y, 40, 60))
        
        # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Ö–∏—Ç–±–æ–∫—Å–∞ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
        if self.show_hitbox:
            hitbox_rect = pygame.Rect(
                screen_x + self.hitbox.x,
                screen_y + self.hitbox.y,
                self.hitbox.width,
                self.hitbox.height
            )
            pygame.draw.rect(screen, (255, 0, 0), hitbox_rect, 2)

    