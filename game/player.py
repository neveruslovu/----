import pygame
from .asset_loader import asset_loader

class Player:
    def __init__(self, x, y):
        self.rect = pygame.Rect(x, y, 40, 50)
        self.hitbox = pygame.Rect(10, 10, 20, 45)
        self.velocity_y = 0
        self.speed = 5
        self.jump_power = -15
        self.gravity = 0.8
        self.is_jumping = False
        self.on_ground = False
        self.facing_right = True
        
        # üîß –£–õ–£–ß–®–ï–ù–ò–ï: Coyote Time –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        self.coyote_time = 0.15  # 150ms –æ–∫–Ω–æ –¥–ª—è –ø—Ä—ã–∂–∫–∞ –ø–æ—Å–ª–µ —Å—Ö–æ–¥–∞ —Å –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã
        self.time_since_ground = 0
        self.jump_buffer = 0     # –ë—É—Ñ–µ—Ä –≤–≤–æ–¥–∞ –ø—Ä—ã–∂–∫–∞
        self.jump_buffer_time = 0.1  # 100ms –±—É—Ñ–µ—Ä
        
        print(f"üéØ Player created at position: ({x}, {y})")
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø—Ä–∞–π—Ç–æ–≤
        self.idle_sprite = asset_loader.load_image("player/alienPink_stand.png", 0.3)
        self.current_sprite = self.idle_sprite
        
        # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è HUD
        self.health_component = type('Health', (), {
            'current_health': 100,
            'max_health': 100
        })()
        
        self.experience = type('Experience', (), {
            'current_level': 1,
            'current_exp': 0,
            'exp_to_next_level': 100
        })()
        
        self.show_hitbox = True

    def update(self, platforms):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä–æ–∫–∞ —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π —Ñ–∏–∑–∏–∫–æ–π"""
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        was_on_ground = self.on_ground
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –≥—Ä–∞–≤–∏—Ç–∞—Ü–∏—é
        self.velocity_y += self.gravity
        self.rect.y += self.velocity_y
        
        # üîß –£–õ–£–ß–®–ï–ù–ò–ï: –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–π–º–µ—Ä—ã
        if self.jump_buffer > 0:
            self.jump_buffer -= 1/60  # –£–º–µ–Ω—å—à–∞–µ–º –±—É—Ñ–µ—Ä
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–ª–∏–∑–∏–π —Å –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º–∏
        self.on_ground = False
        collision_count = 0
        
        for platform in platforms:
            if self.check_collision(platform):
                collision_count += 1
                if self.velocity_y > 0:  # –ü–∞–¥–µ–Ω–∏–µ –≤–Ω–∏–∑
                    self.rect.bottom = platform.rect.top
                    self.on_ground = True
                    self.is_jumping = False
                    self.velocity_y = 0
                    self.time_since_ground = 0  # üîß –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
                elif self.velocity_y < 0:  # –î–≤–∏–∂–µ–Ω–∏–µ –≤–≤–µ—Ä—Ö
                    self.rect.top = platform.rect.bottom
                    self.velocity_y = 0
        
        # üîß –£–õ–£–ß–®–ï–ù–ò–ï: –û–±–Ω–æ–≤–ª—è–µ–º Coyote Time
        if self.on_ground:
            self.time_since_ground = 0
        elif was_on_ground:
            # –¢–æ–ª—å–∫–æ —á—Ç–æ –æ—Ç–æ—Ä–≤–∞–ª–∏—Å—å –æ—Ç –∑–µ–º–ª–∏
            self.time_since_ground = 0
        else:
            # –í –≤–æ–∑–¥—É—Ö–µ - —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
            self.time_since_ground += 1/60  # ~16.67ms –∑–∞ –∫–∞–¥—Ä
        
        # üîß –£–õ–£–ß–®–ï–ù–ò–ï: –ê–≤—Ç–æ–ø—Ä—ã–∂–æ–∫ –ø–æ –±—É—Ñ–µ—Ä—É
        if self.jump_buffer > 0 and self.can_jump():
            self.jump()
            self.jump_buffer = 0

    def handle_event(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–∏–Ω–æ—á–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π"""
        if event.type == pygame.KEYDOWN:
            if event.key == pygame.K_SPACE:
                # üîß –£–õ–£–ß–®–ï–ù–ò–ï: –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–≤–æ–¥ –≤ –±—É—Ñ–µ—Ä –≤–º–µ—Å—Ç–æ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –ø—Ä—ã–∂–∫–∞
                self.jump_buffer = self.jump_buffer_time
                print("üíæ Jump input buffered")

    def handle_keys(self, keys):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –∫–ª–∞–≤–∏—à"""
        moved = False
    
        arrow_left = keys[pygame.K_LEFT] 
        arrow_right = keys[pygame.K_RIGHT]
        a_key = keys[pygame.K_a]
        d_key = keys[pygame.K_d]
    
        if arrow_left or a_key:
            self.rect.x -= self.speed
            self.facing_right = False
            moved = True
        if arrow_right or d_key:
            self.rect.x += self.speed
            self.facing_right = True
            moved = True

    def can_jump(self):
        """üîß –£–õ–£–ß–®–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –∏–≥—Ä–æ–∫ –ø—Ä—ã–≥–Ω—É—Ç—å"""
        return (self.on_ground or 
                self.time_since_ground < self.coyote_time) and not self.is_jumping

    def jump(self):
        """üîß –£–õ–£–ß–®–ï–ù–ò–ï: –£–º–Ω—ã–π –ø—Ä—ã–∂–æ–∫ —Å Coyote Time"""
        if self.can_jump():
            self.velocity_y = self.jump_power
            self.is_jumping = True
            self.on_ground = False
            self.time_since_ground = self.coyote_time  # –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø—Ä—ã–∂–∫–∏
            print(f"üöÄ Jump! Velocity: {self.velocity_y}, Coyote: {self.time_since_ground:.2f}")

    def check_collision(self, platform):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–ª–∏–∑–∏–∏ —Å –ø–ª–∞—Ç—Ñ–æ—Ä–º–æ–π"""
        player_hitbox = pygame.Rect(
            self.rect.x + self.hitbox.x,
            self.rect.y + self.hitbox.y,
            self.hitbox.width,
            self.hitbox.height
        )
        return player_hitbox.colliderect(platform.rect)

    def draw(self, screen, camera):
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∏–≥—Ä–æ–∫–∞"""
        screen_x = self.rect.x - camera.offset.x
        screen_y = self.rect.y - camera.offset.y
        
        # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å–ø—Ä–∞–π—Ç–∞
        if self.current_sprite:
            if not self.facing_right:
                flipped_sprite = pygame.transform.flip(self.current_sprite, True, False)
                screen.blit(flipped_sprite, (screen_x, screen_y))
            else:
                screen.blit(self.current_sprite, (screen_x, screen_y))
        else:
            pygame.draw.rect(screen, (255, 0, 0), (screen_x, screen_y, 40, 60))
        
        # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Ö–∏—Ç–±–æ–∫—Å–∞ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
        if self.show_hitbox:
            hitbox_rect = pygame.Rect(
                screen_x + self.hitbox.x,
                screen_y + self.hitbox.y,
                self.hitbox.width,
                self.hitbox.height
            )
            pygame.draw.rect(screen, (255, 0, 0), hitbox_rect, 2)
            