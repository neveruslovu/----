# game/enemies/snail.py
import pygame
from ..asset_loader import asset_loader
from ..health import HealthComponent
class Snail(pygame.sprite.Sprite):
    def __init__(self, x, y):
        super().__init__()
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø—Ä–∞–π—Ç–∞
        try:
            self.image = asset_loader.load_image("enemies/snail.png", 0.6)
        except:
            # –ó–∞–≥–ª—É—à–∫–∞ –µ—Å–ª–∏ —Å–ø—Ä–∞–π—Ç –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è
            self.image = pygame.Surface((40, 30))
            self.image.fill((150, 75, 0))  # –ö–æ—Ä–∏—á–Ω–µ–≤—ã–π —Ü–≤–µ—Ç
        
        self.rect = self.image.get_rect(topleft=(x, y))
        
        # –§–∏–∑–∏–∫–∞ –∏ AI
        self.speed = 40  # –£–ª–∏—Ç–∫–∏ –º–µ–¥–ª–µ–Ω–Ω–µ–µ —Å–ª–∞–π–º–æ–≤
        self.direction = 1
        self.velocity = pygame.math.Vector2(0, 0)
        self.gravity = 1500
        self.facing_right = True
        
        # –°–æ—Å—Ç–æ—è–Ω–∏—è
        self.health_component = HealthComponent(30)
        self.is_invincible = False
        self.invincibility_timer = 0
        self.invincibility_duration = 1.0  # 1 —Å–µ–∫—É–Ω–¥–∞ –Ω–µ—É—è–∑–≤–∏–º–æ—Å—Ç–∏ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —É—Ä–æ–Ω–∞
        self.is_dead = False      
        self.death_timer = 0
        self.death_duration = 1.0  # 1 —Å–µ–∫—É–Ω–¥–∞ –∞–Ω–∏–º–∞—Ü–∏–∏ —Å–º–µ—Ä—Ç–∏       
        # üî• –ù–û–í–ê–Ø –ü–ï–†–ï–ú–ï–ù–ù–ê–Ø: –æ—Ç–ª–æ–∂–µ–Ω–Ω–∞—è —Å–º–µ—Ä—Ç—å
        self.will_die_after_hurt = False 
        self.is_hurt = False
        self.hurt_timer = 0
        self.hurt_duration = 0.5  # 500ms –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω–∏—è —É—Ä–æ–Ω–∞

        # –•–∏—Ç–±–æ–∫—Å
        self.hitbox = pygame.Rect(0, 0, 30, 25)
        self.show_hitbox = True
        
        print(f"üêå –£–ª–∏—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ –Ω–∞ –ø–æ–∑–∏—Ü–∏–∏ ({x}, {y})!")
    
    def update(self, dt, level):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É–ª–∏—Ç–∫–∏"""

        if self.is_dead:
            self.death_timer -= dt
            if self.death_timer <= 0:
                self.kill()
                print("üíÄ –°–ª–∞–π–º —É–º–µ—Ä –∏ —É–¥–∞–ª–µ–Ω!")
            
            return

        # üî• –ü–†–û–í–ï–†–Ø–ï–ú –ù–£–ñ–ù–û –õ–ò –ó–ê–ü–£–°–¢–ò–¢–¨ –°–ú–ï–†–¢–¨ –ü–û–°–õ–ï –ê–ù–ò–ú–ê–¶–ò–ò –£–î–ê–†–ê
        if self.will_die_after_hurt and not self.is_hurt:
            print("üíÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Å–º–µ—Ä—Ç—å –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ —É–¥–∞—Ä–∞")
            self.die()
            self.will_die_after_hurt = False
            return

        # ‚öîÔ∏è –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–π–º–µ—Ä –Ω–µ—É—è–∑–≤–∏–º–æ—Å—Ç–∏
        if self.is_invincible:
            self.invincibility_timer -= dt
            if self.invincibility_timer <= 0:
                self.is_invincible = False
                print("üõ°Ô∏è –ù–µ—É—è–∑–≤–∏–º–æ—Å—Ç—å —Å–ª–∞–π–º–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å")

        # üé® –û–±–Ω–æ–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø–æ–ª—É—á–µ–Ω–∏—è —É—Ä–æ–Ω–∞
        if self.is_hurt:
            self.hurt_timer -= dt
            if self.hurt_timer <= 0:
                self.is_hurt = False
                print("üé® –ê–Ω–∏–º–∞—Ü–∏—è —É–¥–∞—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
                if self.will_die_after_hurt:
                    print("üíÄ –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ–º —Å–º–µ—Ä—Ç—å –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ —É–¥–∞—Ä–∞")
                    self.die()
                    self.will_die_after_hurt = False
                    return
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –≥—Ä–∞–≤–∏—Ç–∞—Ü–∏—é
        self.velocity.y += self.gravity * dt
    
        # –î–≤–∏–∂–µ–Ω–∏–µ –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏
        self.velocity.x = self.speed * self.direction
    
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—É—é –ø–æ–∑–∏—Ü–∏—é
        old_x, old_y = self.rect.x, self.rect.y
    
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ
        self.rect.x += self.velocity.x * dt
        self.rect.y += self.velocity.y * dt
    
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        if self.velocity.x > 0:
            self.facing_right = True
        elif self.velocity.x < 0:
            self.facing_right = False
    
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã—Ö–æ–¥–∞ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã —É—Ä–æ–≤–Ω—è
        level_width = level.width
        if self.rect.right > level_width - 50 or self.rect.left < 50:
            self.direction *= -1

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è
        self.health_component.update(dt)

    def take_damage(self, amount):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —É—Ä–æ–Ω–∞ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π –∏ –Ω–µ—É—è–∑–≤–∏–º–æ—Å—Ç—å—é"""
        # üî• –ü–†–û–í–ï–†–Ø–ï–ú –ù–ï–£–Ø–ó–í–ò–ú–û–°–¢–¨
        if self.is_invincible:      
            return False
        
        if self.is_dead:
            return False
            
        damaged = self.health_component.take_damage(amount)
        if damaged:
            print(f"üí• –°–ª–∞–π–º –ø–æ–ª—É—á–∏–ª {amount} —É—Ä–æ–Ω–∞! –û—Å—Ç–∞–ª–æ—Å—å HP: {self.health_component.current_health}")
            
            
            
            # ‚öîÔ∏è –í–∫–ª—é—á–∞–µ–º –Ω–µ—É—è–∑–≤–∏–º–æ—Å—Ç—å
            self.is_invincible = True
            self.invincibility_timer = self.invincibility_duration
            
            
            
            # üíÄ –ü–†–û–í–ï–†–ö–ê –°–ú–ï–†–¢–ò - –Ω–æ –ù–ï –∑–∞–ø—É—Å–∫–∞–µ–º —Å–º–µ—Ä—Ç—å —Å—Ä–∞–∑—É
            if self.health_component.is_dead():
                print("üíÄ –°–ª–∞–π–º –ø–æ–ª—É—á–∏–ª —Å–º–µ—Ä—Ç–µ–ª—å–Ω—ã–π —É—Ä–æ–Ω, –Ω–æ —Å–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∂–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —É–¥–∞—Ä–∞")
                # üî• –£–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –§–õ–ê–ì –ß–¢–û –°–õ–ê–ô–ú –£–ú–†–ï–¢ –ü–û–°–õ–ï –ê–ù–ò–ú–ê–¶–ò–ò –£–î–ê–†–ê
                self.will_die_after_hurt = True
            else:
                print("üé® –°–ª–∞–π–º –ø–æ–ª—É—á–∏–ª —É—Ä–æ–Ω, –Ω–æ –≤—ã–∂–∏–ª")
        
        return damaged      
     
    def die(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–º–µ—Ä—Ç—å —Å–ª–∞–π–º–∞"""
        self.is_dead = True
        self.death_timer = self.death_duration
        self.velocity.x = 0
        self.velocity.y = 0


    def draw(self, screen, camera):
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ —É–ª–∏—Ç–∫–∏"""
        screen_rect = self.rect.move(-camera.offset.x, -camera.offset.y)
        
        # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å–ø—Ä–∞–π—Ç–∞
        if not self.facing_right:
            flipped_sprite = pygame.transform.flip(self.image, True, False)
            screen.blit(flipped_sprite, screen_rect)
        else:
            screen.blit(self.image, screen_rect)
        
        # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Ö–∏—Ç–±–æ–∫—Å–∞ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
        if self.show_hitbox:
            hitbox_rect = pygame.Rect(
                screen_rect.x + self.hitbox.x,
                screen_rect.y + self.hitbox.y,
                self.hitbox.width,
                self.hitbox.height
            )
            pygame.draw.rect(screen, (255, 0, 0), hitbox_rect, 2)