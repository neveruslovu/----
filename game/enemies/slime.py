import pygame
from ..health import HealthComponent
from ..asset_loader import asset_loader

class Slime(pygame.sprite.Sprite):
    def __init__(self, x, y):
        super().__init__()
        
        # üé® –ó–ê–ì–†–£–ó–ö–ê 4 –°–ü–†–ê–ô–¢–û–í –°–õ–ê–ô–ú–ê
        self.load_sprites()
        self.current_sprite = self.idle_sprite
        
        # –ê–Ω–∏–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        self.current_state = "idle"  # idle, move, hurt, dead
        self.animation_frame = 0
        self.animation_speed = 0.15
        self.animation_timer = 0
        
        # –°–æ—Å—Ç–æ—è–Ω–∏—è
        self.is_hurt = False
        self.hurt_timer = 0
        self.hurt_duration = 0.5  # 500ms –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω–∏—è —É—Ä–æ–Ω–∞
        
        # ‚öîÔ∏è –°–ò–°–¢–ï–ú–ê –ù–ï–£–Ø–ó–í–ò–ú–û–°–¢–ò –î–õ–Ø –í–†–ê–ì–û–í
        self.is_invincible = False
        self.invincibility_timer = 0
        self.invincibility_duration = 1.0  # 1 —Å–µ–∫—É–Ω–¥–∞ –Ω–µ—É—è–∑–≤–∏–º–æ—Å—Ç–∏ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è —É—Ä–æ–Ω–∞
        
        # üíÄ –°–ò–°–¢–ï–ú–ê –°–ú–ï–†–¢–ò
        self.is_dead = False
        self.death_timer = 0
        self.death_duration = 1.0  # 1 —Å–µ–∫—É–Ω–¥–∞ –∞–Ω–∏–º–∞—Ü–∏–∏ —Å–º–µ—Ä—Ç–∏
        
        # üî• –ù–û–í–ê–Ø –ü–ï–†–ï–ú–ï–ù–ù–ê–Ø: –æ—Ç–ª–æ–∂–µ–Ω–Ω–∞—è —Å–º–µ—Ä—Ç—å
        self.will_die_after_hurt = False
        
        # –ì—Ä–∞—Ñ–∏–∫–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Å–ø—Ä–∞–π—Ç
        if self.current_sprite:
            self.image = self.current_sprite
            self.rect = self.image.get_rect(topleft=(x, y))
            # –•–∏—Ç–±–æ–∫—Å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –†–ï–ê–õ–¨–ù–û–ì–û —Ä–∞–∑–º–µ—Ä–∞ —Å–ø—Ä–∞–π—Ç–∞
            sprite_width, sprite_height = self.image.get_size()
            self.hitbox = pygame.Rect(
                (sprite_width - 20) // 2,  # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏
                (sprite_height + 13) // 2, # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏
                22, 22
            )
        else:
            self.image = pygame.Surface((34, 24))
            self.rect = self.image.get_rect(topleft=(x, y))
            self.hitbox = pygame.Rect(0, 0, 20, 20)
        
        self.show_hitbox = True
        
        # –ë–∞–∑–æ–≤–∞—è —Ñ–∏–∑–∏–∫–∞
        self.health_component = HealthComponent(30)
        self.speed = 40
        self.direction = 1
        self.velocity = pygame.math.Vector2(0, 0)
        self.gravity = 1500
        self.facing_right = True
        
    
    def load_sprites(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç 4 —Å–ø—Ä–∞–π—Ç–∞ –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–π —Å–ª–∞–π–º–∞"""
        try:
            # üé® 4 –û–°–ù–û–í–ù–´–• –°–ü–†–ê–ô–¢–ê
            self.idle_sprite = asset_loader.load_image("enemies/slimePurple.png", 0.6)  # —Å—Ç–æ–∏—Ç
            self.move_sprite = asset_loader.load_image("enemies/slimePurple_move.png", 0.6)  # –¥–≤–∏–∂–µ—Ç—Å—è
            self.hurt_sprite = asset_loader.load_image("enemies/slimePurple_hit.png", 0.6)  # –ø–æ–ª—É—á–∏–ª —É—Ä–æ–Ω
            self.dead_sprite = asset_loader.load_image("enemies/slimePurple_dead.png", 0.6)  # —É–º–µ—Ä
            
            print("üé® 4 —Å–ø—Ä–∞–π—Ç–∞ —Å–ª–∞–π–º–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø—Ä–∞–π—Ç–æ–≤ —Å–ª–∞–π–º–∞: {e}")
            # –ó–∞–≥–ª—É—à–∫–∏ –µ—Å–ª–∏ —Å–ø—Ä–∞–π—Ç—ã –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å
            self.create_placeholder_sprites()
    
    def create_placeholder_sprites(self):
        """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Å—Ç—ã–µ —Å–ø—Ä–∞–π—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        self.idle_sprite = self.create_colored_surface((100, 100, 200))    # –°–∏–Ω–∏–π - —Å—Ç–æ–∏—Ç
        self.move_sprite = self.create_colored_surface((80, 80, 180))      # –¢–µ–º–Ω–æ-—Å–∏–Ω–∏–π - –¥–≤–∏–∂–µ—Ç—Å—è
        self.hurt_sprite = self.create_colored_surface((255, 100, 100))    # –ö—Ä–∞—Å–Ω—ã–π - –ø–æ–ª—É—á–∏–ª —É—Ä–æ–Ω
        self.dead_sprite = self.create_colored_surface((50, 50, 50))       # –¢–µ–º–Ω—ã–π - —É–º–µ—Ä
    
    def create_colored_surface(self, color):
        """–°–æ–∑–¥–∞–µ—Ç —Ü–≤–µ—Ç–Ω—É—é –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç—å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        surf = pygame.Surface((40, 30))
        surf.fill(color)
        return surf
    
    def update_animation(self, dt):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∞–Ω–∏–º–∞—Ü–∏—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
        previous_state = self.current_state
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        if self.is_dead:
            self.current_state = "dead"
            print(f"üíÄ –ê–Ω–∏–º–∞—Ü–∏—è —Å–º–µ—Ä—Ç–∏: {self.death_timer:.2f} —Å–µ–∫ –æ—Å—Ç–∞–ª–æ—Å—å")
        elif self.is_hurt:
            self.current_state = "hurt"
            print(f"üí• –ê–Ω–∏–º–∞—Ü–∏—è —É–¥–∞—Ä–∞: {self.hurt_timer:.2f} —Å–µ–∫ –æ—Å—Ç–∞–ª–æ—Å—å")
        elif abs(self.velocity.x) > 0.1:  # –î–≤–∏–∂–µ—Ç—Å—è
            self.current_state = "move"
        else:
            self.current_state = "idle"
        
        # –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
        if previous_state != self.current_state:
            self.animation_frame = 0
            self.animation_timer = 0
            print(f"üîÑ –°–º–µ–Ω–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–ª–∞–π–º–∞: {previous_state} -> {self.current_state}")
        
        # üé® –ü–†–û–°–¢–ê–Ø –°–ò–°–¢–ï–ú–ê –ê–ù–ò–ú–ê–¶–ò–ô - –º–µ–Ω—è–µ–º —Å–ø—Ä–∞–π—Ç—ã –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—é
        if self.current_state == "idle":
            self.current_sprite = self.idle_sprite
        
        elif self.current_state == "move":
            # üî• –ü–†–û–°–¢–ê–Ø –ü–£–õ–¨–°–ê–¶–ò–Ø –¥–ª—è –¥–≤–∏–∂–µ–Ω–∏—è (–±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–∞–¥—Ä–æ–≤)
            self.animation_timer += self.animation_speed
            if self.animation_timer >= 1:
                # –ß–µ—Ä–µ–¥—É–µ–º –º–µ–∂–¥—É idle –∏ move —Å–ø—Ä–∞–π—Ç–æ–º –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–∞ –¥–≤–∏–∂–µ–Ω–∏—è
                if self.current_sprite == self.idle_sprite:
                    self.current_sprite = self.move_sprite
                else:
                    self.current_sprite = self.idle_sprite
                self.animation_timer = 0
        
        elif self.current_state == "hurt":
            self.current_sprite = self.hurt_sprite
        
        elif self.current_state == "dead":
            self.current_sprite = self.dead_sprite
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        self.image = self.current_sprite
    
    def update(self, dt, level):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ª–∞–π–º–∞ —Å –∞–Ω–∏–º–∞—Ü–∏—è–º–∏"""
        # üíÄ –ï—Å–ª–∏ —Å–ª–∞–π–º –º–µ—Ä—Ç–≤, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —Å–º–µ—Ä—Ç–∏
        if self.is_dead:
            self.death_timer -= dt
            if self.death_timer <= 0:
                self.kill()
                print("üíÄ –°–ª–∞–π–º —É–º–µ—Ä –∏ —É–¥–∞–ª–µ–Ω!")
            else:
                self.update_animation(dt)
            return

        # üî• –ü–†–û–í–ï–†–Ø–ï–ú –ù–£–ñ–ù–û –õ–ò –ó–ê–ü–£–°–¢–ò–¢–¨ –°–ú–ï–†–¢–¨ –ü–û–°–õ–ï –ê–ù–ò–ú–ê–¶–ò–ò –£–î–ê–†–ê
        if self.will_die_after_hurt and not self.is_hurt:
            print("üíÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Å–º–µ—Ä—Ç—å –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ —É–¥–∞—Ä–∞")
            self.die()
            self.will_die_after_hurt = False
            return

        # ‚öîÔ∏è –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–π–º–µ—Ä –Ω–µ—É—è–∑–≤–∏–º–æ—Å—Ç–∏
        if self.is_invincible:
            self.invincibility_timer -= dt
            if self.invincibility_timer <= 0:
                self.is_invincible = False
                print("üõ°Ô∏è –ù–µ—É—è–∑–≤–∏–º–æ—Å—Ç—å —Å–ª–∞–π–º–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å")

        # üé® –û–±–Ω–æ–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø–æ–ª—É—á–µ–Ω–∏—è —É—Ä–æ–Ω–∞
        if self.is_hurt:
            self.hurt_timer -= dt
            if self.hurt_timer <= 0:
                self.is_hurt = False
                print("üé® –ê–Ω–∏–º–∞—Ü–∏—è —É–¥–∞—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
                if self.will_die_after_hurt:
                    print("üíÄ –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ–º —Å–º–µ—Ä—Ç—å –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏ —É–¥–∞—Ä–∞")
                    self.die()
                    self.will_die_after_hurt = False
                    return

        # –ü—Ä–∏–º–µ–Ω—è–µ–º –≥—Ä–∞–≤–∏—Ç–∞—Ü–∏—é
        self.velocity.y += self.gravity * dt
    
        # –î–≤–∏–∂–µ–Ω–∏–µ –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏
        self.velocity.x = self.speed * self.direction
    
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä—É—é –ø–æ–∑–∏—Ü–∏—é
        old_x, old_y = self.rect.x, self.rect.y
    
        # –î–≤–∏–∂–µ–Ω–∏–µ
        self.rect.x += self.velocity.x * dt
        self.rect.y += self.velocity.y * dt
    
        # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∑–≥–ª—è–¥–∞
        if self.velocity.x > 0:
            self.facing_right = True
        elif self.velocity.x < 0:
            self.facing_right = False
    
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è
        self.health_component.update(dt)
    
        # üé® –û–±–Ω–æ–≤–ª—è–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
        self.update_animation(dt)
    
    def take_damage(self, amount):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —É—Ä–æ–Ω–∞ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π –∏ –Ω–µ—É—è–∑–≤–∏–º–æ—Å—Ç—å—é"""
        # üî• –ü–†–û–í–ï–†–Ø–ï–ú –ù–ï–£–Ø–ó–í–ò–ú–û–°–¢–¨
        if self.is_invincible:
            print("üõ°Ô∏è –°–ª–∞–π–º –Ω–µ—É—è–∑–≤–∏–º, —É—Ä–æ–Ω –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω")
            return False
        if self.is_dead:
            print("üíÄ –°–ª–∞–π–º —É–∂–µ –º–µ—Ä—Ç–≤, —É—Ä–æ–Ω –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω")
            return False
            
        damaged = self.health_component.take_damage(amount)
        if damaged:
            print(f"üí• –°–ª–∞–π–º –ø–æ–ª—É—á–∏–ª {amount} —É—Ä–æ–Ω–∞! –û—Å—Ç–∞–ª–æ—Å—å HP: {self.health_component.current_health}")
            
            # üé® –í–∫–ª—é—á–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø–æ–ª—É—á–µ–Ω–∏—è —É—Ä–æ–Ω–∞
            self.is_hurt = True
            self.hurt_timer = self.hurt_duration
            
            # ‚öîÔ∏è –í–∫–ª—é—á–∞–µ–º –Ω–µ—É—è–∑–≤–∏–º–æ—Å—Ç—å
            self.is_invincible = True
            self.invincibility_timer = self.invincibility_duration
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–∫–∞–∑–∞ hurt —Å–ø—Ä–∞–π—Ç–∞
            self.current_state = "hurt"
            self.animation_frame = 0
            self.animation_timer = 0
            
            # üíÄ –ü–†–û–í–ï–†–ö–ê –°–ú–ï–†–¢–ò - –Ω–æ –ù–ï –∑–∞–ø—É—Å–∫–∞–µ–º —Å–º–µ—Ä—Ç—å —Å—Ä–∞–∑—É
            if self.health_component.is_dead():
                print("üíÄ –°–ª–∞–π–º –ø–æ–ª—É—á–∏–ª —Å–º–µ—Ä—Ç–µ–ª—å–Ω—ã–π —É—Ä–æ–Ω, –Ω–æ —Å–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∂–µ–º –∞–Ω–∏–º–∞—Ü–∏—é —É–¥–∞—Ä–∞")
                # üî• –£–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –§–õ–ê–ì –ß–¢–û –°–õ–ê–ô–ú –£–ú–†–ï–¢ –ü–û–°–õ–ï –ê–ù–ò–ú–ê–¶–ò–ò –£–î–ê–†–ê
                self.will_die_after_hurt = True
            else:
                print("üé® –°–ª–∞–π–º –ø–æ–ª—É—á–∏–ª —É—Ä–æ–Ω, –Ω–æ –≤—ã–∂–∏–ª")
        
        return damaged
    
    def die(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–º–µ—Ä—Ç—å —Å–ª–∞–π–º–∞"""
        self.is_dead = True
        self.death_timer = self.death_duration
        self.velocity.x = 0
        self.velocity.y = 0
        
        print(f"üíÄ –ó–∞–ø—É—â–µ–Ω–∞ –∞–Ω–∏–º–∞—Ü–∏—è —Å–º–µ—Ä—Ç–∏ –Ω–∞ {self.death_duration} —Å–µ–∫—É–Ω–¥")
    
    def draw(self, screen, camera):
        """–û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å–ª–∞–π–º–∞"""
        screen_x = self.rect.x - camera.offset.x
        screen_y = self.rect.y - camera.offset.y
        
        # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å–ø—Ä–∞–π—Ç–∞
        if self.current_sprite:
            if not self.facing_right:
                flipped_sprite = pygame.transform.flip(self.current_sprite, True, False)
                screen.blit(flipped_sprite, (screen_x, screen_y))
            else:
                screen.blit(self.current_sprite, (screen_x, screen_y))
        else:
            pygame.draw.rect(screen, (255, 0, 0), (screen_x, screen_y, 40, 60))
        
        # –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Ö–∏—Ç–±–æ–∫—Å–∞ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
        if self.show_hitbox:
            hitbox_rect = pygame.Rect(
                screen_x + self.hitbox.x,
                screen_y + self.hitbox.y,
                self.hitbox.width,
                self.hitbox.height
            )
            pygame.draw.rect(screen, (255, 0, 0), hitbox_rect, 2)